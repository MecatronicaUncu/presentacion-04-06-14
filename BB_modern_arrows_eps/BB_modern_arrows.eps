%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (Jay Hilgert) ()%%Title: (BB_modern_arrows.eps)%%CreationDate: 9/4/07 8:34 PM%%BoundingBox: -302 -158 734 642%%HiResBoundingBox: -301.7642 -157.8057 733.8643 641.4927%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 234.5 233.5 234.5 233.5%AI3_TileBox: -54 -122 522 612%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 468 468%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -969 1709 0.5 1506 1115 26 0 0 6 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 100 8%%BeginData: 11408 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD60FF7D7DFD7DFF7D474E7DFD7BFF834D966C4E7DFD79FF7D4796%989F6B4D7DFD77FF8347969F81819F6C4E7DFD05FF70A8FD6EFF7D479698%815D8198964D7DFFFFFFAF708D69A8FD6CFF7D47969F815DA599964DA7FD%04FF7093A09A69A8FD6AFF7D477274815D81986C4D83FFFFFFAF708DA0CF%938E7DFD69FF834D969E81818199974DA7FD04FF7093A1FF9394A1FD69FF%7D479698815D81996C4783FD04FF708DA0CF93697DFD69FF834D96988181%8199974D83FD04FF7093A1CF93947DFD69FF7D479698815781996C2383FD%04FF708DA0CF93697DFD69FF8347969F815DA599974DA7FD04FF7093A1FF%998E7DFD69FF7D479698815D8199964D83FFFFFFAF708DA1CF938E7DFD69%FF7D47969F815DA599964DA7FD04FF7093A1FF938E7DFD69FF7D47727481%5D81986C4D83FFFFFFAF708DA0CF93697DFD69FF834D969E81818199974D%A7FD04FF7093A1FF9394A1FD69FF7D479698815D81996C47A7AFA9FFFF70%8DA0CF93697DFD69FF834D969881818199974DA7FF7979AF7093A1CF9394%7DFD69FF7D479698815781996C47A7FF7348A9708DA0CF93697DFD69FF83%47969F815DA599974DA8FF7973AF7693A1FF998E7DFD43FF7D527D587D52%7D587D527D587D527D587D527D587D527D587D527D587D527D587D527D58%7D587D479698815D8199964D51597948597093A1CF938E7DFD44FF52FD24%27514D969F815DA599974D522D4E49526F93A1FF99947DFD45FF58272727%2D2727272D2727272D2727272D2727272D2727272D2727274B2727272D27%2727524D9674815D81986C4D512772492E4B93A0CF939427A8FD45FF5227%27522752275227522752275227522752275227522752272D277094947070%4B2D27524E969E81818199974D512D7373526F94A1FF93944C2DA8FD45FF%7C27272751272727512727275127272751272727512727274C4B948D948E%948D944B514D9698815D81996C4D51277249526F93A0CF93944B2D27A8FD%45FF522D2751275227512752275127522751275227512752272D6F949494%4B524B948D764E969881818199974D51277373526F94A1CF93944C2D2751%A8FD45FF52262D2727272D2727272D2727272D2727272D2727272D27708D%944B27272D4B764D9698815781996C4D52277248524B93A0CF938E272D27%2727A8FD45FF525127522752275227522752275227522752275227522751%4B706F52275227524D969F815DA599974D7773734E526F94A1FF99944B52%27522752A8FD45FF522751272727512727272D2751275127272751272727%512727272D272727514C6C98815D8199964D512753282E4B93A1CF93944B%2D2751272727A8FD45FF52272752272D2752275127519951275227512752%275127522751275227512D739AA55DA599974D52275127517094A1FF9994%4B5227512752272DA8FD45FF582727272D5175749F7499749F9851FD0527%2D2727272DFD0527526B9F5D8174964D512727272D4B93A0CF93944B2727%2DFD0527A8FD45FF5227275299C19EC19FC19EC19FC19E75275227522752%27522752275227514D957A817A954E52285227527094A1FF93944C2D2752%275227522751A8FD45FF7C272774C1989F989F989F989F9E752751272727%51272727512727274B4B4E71A55D9F6B53587D2E2D7093A0CF9394272D27%2727512727272D27A8FD45FF522775C1989F5151275227519875272D2752%27512752272E28522E59527D4D957A819F964C817B596F94A1CF93944B27%27522751275227512751A8FD45FF52269F989F4AFD062751FD05272D2727%2859527C7B7C7B7B574D719F5DA5706C517C4C93A0CF9394FD05272D2727%27522752277D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D%7D7D527D7D7D527DFD25FF52519FC1985227522752275227515152275127%52275259A07A7C5158515852969F81819F71787094A1FF99944B27275127%52275127FD0552FD217DFD25FF52279F989F272D2727275127517DFFFFFF%7DFD04272D527B515251522D52489A7A81817B6A93A1CF9394272726FD04%275127525251272727A8FD45FF522798C19F5127522751277DA8FD05FF7D%2D2751275253A65752525251536CA080827093A1FF999427272751275227%51275151522752272DA8FD45FF52279F989F2727272D27277DFFA8512652%A8FF512727276994539F5152515151536C756F93A0CF93944B27F82D2727%272D27272752FD0527A8FD45FF525198C19F5127522752277C7D7D275227%A7FF7D27516F9553A6577C5127265151537094A1FF939471722D51525227%5227522752515227522751A8FD45FF7C279F989F27272751FD08277DFF52%276994538257525151F82727526F93A0CF938E519F6B722D525227275127%2727525227275127A8FD45FF52519F9F98522751275227512752272752FF%FF526994538257525151042726527094A1CF93947581819F957252522751%2751272D275227512751A8FD45FF52269F989FFD05272DFD04272DFFFF7D%6994538157525151F82726516F8DA0CF936A4D9F7A81569F6B722D522752%27522752FD0527A8FD45FF52519FC19852275227522751272D52FFFFA869%9453A657525151272751587094A1FF999451786C9F8182819F7173FD0652%515227522752A8FD45FF52279F989F272D27272751274C27A8AF7D459453%7B57585151F82751524B94A0CF939451572D536C997A81819F6B722D2727%5127272751272727A8FD45FF522798C19F51275227512752949469947094%52A657589E9F27275152527693CFA094515727582D776C9F7A82819F6B72%5251275227512752272DA8FD45FF52279F989F2727272D2727279499A093%8E6F7B5152749F7427265227524B93A79A6951047B522727536C997A817B%9F6B722D27272DFD0527A8FD45FF525198C19F512752272752FF70C2FFC9%8D7657589FC1512D51FD04527C8DC9CA946A7C7B5327522D776CC1818281%9F96722D52275227522751A8FD45FF7C279F989FFD042751FFFF7693A0AE%C98D7075C15027265251522D7B7B7093CFA793697C2E27272D2D4D6C9F7A%817A9F6C4D27512727275127A8FD45FF52519FC19852272751FFFF846F94%8D9ACFC98D94512751525152527B7B81579493CFC9946A52275127512D53%6C9F8181809A6C52275227512751A8FD45FF52269F989F4A2751FFFF7D45%706F76699AAEC98D70275251522D7B7A81815127708DCFA7936952FD0527%4D6C9F7B817A964D2D272D272727A8FD45FF522751C19E9F75FFFFA86F94%52A07B7669C2CFC98D76525252827B8181512759599493CFA7B670593552%27512D7895A55DA595722D5227522752A8FD45FF522751749E9FFFFFC974%9F999F989F7A76699AAEA16970757B7A818151275A5A2E279493CAA79370%5935592727287299817A9A4D512751272727A8FD45FF522727519FFFFFC9%989F98C19E9F9EC1514C69BCCFC98D9A9F9F81512E612F272627279493CF%A0944B27355A27526C9F818194722D512752272DA8FD45FF58272727FFFF%A77499759F749F7A9F26272C76699AAEA169707A5128612E26F82727352F%7099CF9370F8272E5847957A817A954D51FD0527A8FD45FF522752FFFFA8%699453A657589FC15127517651768DBCCFC98D9458612E27262E59603559%6ABCCFBC4C2726524D979981819F6C77275127522751A8FD45FF5227FFFF%836994538257527AC15027265251522D76699AAEC98D712E272027355927%4B699AA8A1697D352D4D9699815D81997227512727275127A8FD45FF7DFF%FF846994538257589FC1512751525152527B7B7C8D9ACFC98D70272E5A59%27526A9AA8CA93702E594D9799A5818198974D51275227512751A8FD47FF%8345945381515274C14A27265251522D7B7A815D52699AAEC98D702F5926%526993A8C98D70272D4D6C9981578198964D512727272D272727A8FD46FF%A8699453A657587BC151275176525251827B8181572F7D8DC2CFC98D762D%526ABCCFCA939427524D9799815D819F964E522751275227522752A8FD45%FFA84594538151527B9F4A2727522D52517B7A52525228592E52699AAEA7%8D706993A7C98D7027514D6C99815D8198964D52275127272751272727A8%FD45FF709453A657527BC151274B52525251817B8157736C726C724E7169%BCCFC993BCCFC98D9427524D9799815D819F964D52275127522751275227%2DA8FD44FF9494537B51527A9F2627265227522D7B74818151479A98996F%9B7071699AA7CFA7C98D7027514D6C98815D8174964D582EFD04272DFD05%27A8FD43FF9B9453A657589FC1512751FD0452817B8281512E729AA581A5%9E954E7670949ABC937027524D9799A581819E964E523552275227522752%27522751A8FD42FF9A8E538257527AC15027265251522D7B7B8181512E59%4D957A81579F71722D524B704B5227514D9699815D8198964D51275A2751%272727512727275127A8FD41FF9A9453A657589FC1512751525152527B7B%8181512E612E4D71A5818181A595732E51272D27524D9799A5818198964E%52F853595127522751275227512751A8FD40FF9A8E5381515274C14A2726%5251522D7B7A815D512E6028274C7198997A81579F7172275127514D6C99%81578198964D51F82735522727272D2727272D272727A8FD3FFF9B9453A6%57587BC151275176525251827B8181512F612E272653729C6D9A7A8281A5%95734D534E9699815D819F964E5227272E5A275127522752275227522752%A8FD3EFF9A8E538151527B9F4A2727522D52517B7A8181512E612E27F82E%526D48536C9A7A81819F70966B9574815D8198964E51F827285A274B2727%275127272751272727A8FD3DFF9B9453A657527BC151274B52525251817B%8181512E612E27262E5A594D522D536D9A7A8281817AA57A815D819F964D%52272728612E4B27522751275227512752272DA8FD3CFF948E537B51527A%9F2627265227522D7B7481815128612E26F82736532752272727536C9A7A%815D815D815D8174964D582726275A2EFD04272D2727272DFD0527A8FD3B%FF9B9453A657589FC1512751FD0452817B8281512E852E27262E5A59277D%5252275275536C9B99A57AA57B9F94974D585A5A2F605A52275227522752%2752275227522751A8FD3AFF9B6A538251527AC1502727522E522D7B7B81%5D512E612E272027365327FD04A8524AC174524D736B9570956C724C5127%532F5A355A2F5127272751272727512727275127A8FD20FFCFCACFCACFCA%CFCACFCACFCACFCACFCACFCACFCACACAFFFFCF9A9376A07B7C9FC1512751%7B517C517B7A81817B2E612E27202E5A584BFFA7514AA1CA9F98C1755252%534D724D5351512751274B275227522752275127522751275227512751A8%FD20FF989F989F989F989F989F989F989F989F989F989E9FFFFFC9989898%9F989F7A9F4A054A9F989F989F989F989E58602827F827357C98CFA69E98%9F74CF9F9E745127272751272DFD05272DFD07272D2727272D2727272D27%2727A8FD20FF9F989F989F989F989F989F989F989F989F989E9FFFFFCE9E%C19EC19F9F9FC1512750C19EC198C19FC19EC17C612E27262E5AA09ECFC9%C19EC19EC1CFC87452275227522751275227522752275227522752275227%5227522752275227522752A8FD20FFA0C8A0C9A0C8A0C9A0C8A0C9A0C8A0%C9A0A6A0FFFFCF92997B9F757B9E9F4A274B75757B759F749F7A7452612E%27F827365874CF7D7474757475A7A84A2727512727275127272751272727%5127272751272727512727275127272751272727A8FD35FF9B9453A65758%7BC151274B7652522D7C7B8181512F612E27262D355327A87DFD0627A8FD%05272D2727272D2727272D2727272D2727272D2727272D2727272D272727%2D2727A8FD34FF948E537B51527A9F2627265227522D7B7481815128612E%26F82735847DFFA87D7DA87DA87DA87D837DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DFD34FF9B9453A657%589FC1512751FD0452817B8281512E852E27262E5AAFFD63FF9A8E538257%527AC15027265251522D7B7B8181512E612E27202735AFFD63FF9A9453A6%57589FC1512751525152527B7B8181512E612E27202E5AAFFD63FF948E53%81515274C14A27265251522D7B7A815D512E602827F8272FAFFD64FF9B53%A657587BC151275176525251827B8181512F612E27262E35AFFD65FF7E7B%51527B9F4A2727522D52517B7A8181512E612E27F82735A9FD65FF7E9F57%527BC151274B52525251817B8181512E612E27262735AFFD65FF597B5152%7A9F2627265227522D7B7A81815128612E26F82735A9FD65FF7E7B57589F%C1512751FD045281755781512E852E27262E5AAFFD65FF597B57527AC150%27265251522D81752704512E612E27202735AFFD65FF847B7B589FC15127%515251525281742727272E612E27202E5AAFFD67FF7D7B517B5027265251%522D7B7B52F8262E602E26F8272FAFFD69FF7C512727517C525252817BA9%FF7D4BAF5A5A272735AFFD69FFA751F82750522D52517B7BA9FD06FF5A5A%2F85FD69FFA75127272D9F575251817BA9FD08FF5AA9FD69FFA727F82751%AF7D7B517B7B84FD73FFA851F82751FFFFFF7D9F7BA9FD75FF512651FD05%FF5984FD77FF7CFDF3FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 6 Bd[<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Midday Sky)(Midday Sky) 0 3 Bd[<BBBCBCBDBEBFC0C0C1C2C2C3C3C4C5C5C6C7C7C8C8C8C9C9CACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D2D3D3D4D4D5D5D6D6D7D7D7D8D8D9D9DADBDBDCDCDCDDDDDDDEDEDEDFDFDFE0E0E1E1E2E2E3E3E3E4E4E5E5E6E6E7E7E8E8E8E9E9E9EAEAEAEBEBEBECECEDEDEDEDEEEEEFEFF0F0F0><6A6C6D6F707173747677797A7B7D7E8081828384858788898A8B8D8E8F90919294959697989A9B9C9D9FA0A1A2A3A4A5A6A7A8A9AAABACADAFB1B2B3B4B5B5B6B7B8B9BABBBBBCBDBEBFC0C0C2C3C3C4C5C6C7C8C8C9C9CBCCCCCDCECFCFD0D1D2D2D3D4D5D6D6D7D7D8D9DADADBDBDCDDDE>000.011765<8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575654535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C><FFFEFEFDFDFCFCFBFBFAFAF9F9F8F7F7F6F6F5F5F4F4F3F3F2F2F1F0F0EFEFEEEEEDEDECECEBEAEAE9E9E8E8E7E7E6E6E5E5E4E3E3E2E2E1E1E0E0DFDFDEDEDDDCDCDBDBDADAD9D9D8D8D7D7D6D5D5D4D4D3D3D2D2D1D1D0CFCFCECECDCDCCCCCBCBCACAC9C8C8C7C7C6C6C5C5C4C4C3C3C2>4 %_Br<15161718191A1B1C1D1E1F20212223242526272829292A2B2C2D2E2F2F30313233343536373738393A3B3C3C3D3E3F40414243444445464748494A4B4C4D4D4E4F5050515253545555565758595A5B5C5C5D5E5F606061626364646566676869696A6B6B6C6D6E6F6F707171727374757676777878797A7B7C7C7D7E7F8080818282838485858686878889898A8B8C8D8D8E8F8F909192929394959697979898999A9A9B9B9C9C9D9D9E9F9FA0A1A1A2A2A2A3A4A4A5A6A6A7A7A8A8A9A9A9AAAAABACACADAEAEAFAFAFB0B0B1B2B2B2B3B3B4B4B5B5B5B6B6B7B7B8B8B9B9BABABBBB><00000000000000000000000001010001010201020202020302030302030303030404040405050405050505060607060707080707080708080808090809090A0A090B0A0C0B0D0C0E0D0F0E100F0F1010111012111312131313141415141615171618171918181A191B1A1B1B1C1C1D1D1E1E1E1F1F202021212222232324242425252626282729292A2A2B2B2B2C2C2D2D2F2E303032313133333535373738383A393B3B3B3C3C3E3E3F3F414143424444444646474749494A4A4C4C4D4D4D4F4F51515252545456565658585A595B5B5D5D5E5E606060626263636565676769696A6A>00<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403><F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEAEAEAE9E9E8E8E7E7E6E6E5E5E5E4E4E3E3E2E2E1E1E0E0DFDFDFDEDEDDDDDCDCDBDBDADAD9D9D9D8D8D7D7D6D6D5D5D4D4D3D3D3D2D2D1D1D0D0CFCFCECECECDCDCCCCCBCBCACAC9C9C8C8C8C7C7C6C6C5C5C4C4C3C3C2C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABABAAAAA9A9A8A8A7A7A6A6A5A5A5A4A4A3A3A2A2A1A1A0A09F9F9F9E9E9D9D9C9C9B9B9A9A9A9999989897979696959594949493939292919190908F8F8E8E>14 %_Br[0.941176 0.870588 0 0 0.011765 0.109804 0.760784 2 50 100 %_BS%_0.941176 0.870588 0 0 0.011765 0.109804 0.760784 2 50 100 Bs0.733333 0.415686 0 0 0.011765 0.556863 1 2 50 50 %_BS%_0.733333 0.415686 0 0 0.011765 0.556863 1 2 50 50 Bs0.082353 0 0 0 0.898039 0.964706 1 2 50 0 %_BS%_0.082353 0 0 0 0.898039 0.964706 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 6 Bd[0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Sensual Red)(Sensual Red) 0 5 Bd[<58595A5B5C5D5E5F6061626364666768696A6B6C6E6F7071727374757778797A7B7C7E7F8080818282838485868687888889898A8A8B8C8D8E8F90919293949597989A9B9D9E9FA1A2A3A4A5A6A8A9AAACADAEAFB1B2B3B4B5B7B8B9BABBBDBEBF><FBFBFAF9F8F6F5F3F1F0EEECEBEAE9E8E7E6E5E4E3E2E1E0DFDDDCDBDAD8D7D6D5D4D3D2D1D0CFCECECDCCCBCBCAC9C8C8C7C6C5C4C3C3C2C1C1C0C0BFBFBEBEBDBCBBBAB9B9B8B7B6B6B5B4B4B3B3B2B2B1B1B0B0B0AFAFAFAFAEAEAEAEAEADAD><F3F2F0EEECEAE8E5E2DFDDDAD8D6D5D3D2D1CFCECDCCCBCAC9C8C7C5C4C3C2C0BFBEBDBCBBBAB9B9B8B8B7B7B6B6B5B5B4B3B2B1B0AFAFAEAEAEAEAEAEADADADACACABABAAAAAAA9A9A8A8A8A8A7A7A7A7A7A7A7A7A8A8A8A8A8A9A9A9AAAAABAB><8D8E909193949697999B9C9E9FA1A2A3A5A6A7A8AAABACAEAFB1B2B3B5B6B7B9BABBBCBDBEBFC0C1C2C2C3C4C5C5C6C7C8C9CACBCCCCCDCECFD0D1D1D2D2D3D3D4D4D5D5D5D6D6D7D7D8D8D9D9DADADBDBDCDDDDDEDEDFE0E0E1E2E2E3E4E4E5E6><61605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938373635343332312F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>004 %_Br<3132323333343535363637373839393A3A3B3B3B3C3C3C3D3D3D3D3E3E3F3F3F4040414142424343444445464646474747484849494A4A4A4B4B4C4C4D4D4E4E4F4F505051515252535354545555565657575858><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFCFCFBFBFBFBFBFB><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFCFAF7F6F5F4F3F3F3><202122232425262728292B2C2D2E2F30323334353638393A3B3C3D3E40414243444647484A4B4C4E4F505354555758595B5C5E5F606263656668696A6C6D6E707172747577787A7B7D7E808283848687898A8B8D><B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261>004 %_Br<000000000000000000000000000000000000010203040404050608090A0A0A0C0D0E0F0E101112121313141516171819191A1B1C1C1D1D1E1F20212121222324242525262727282929292A2A2B2C2C2C2D2E2E2F302F303131><CBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E0E1E2E3E4E5E5E6E7E8E8E9EAEBECECEDEEEFEFF0F1F2F3F4F5F5F6F6F7F8F9F9FAFBFBFCFDFDFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>1<00000000000000000000000000000000000000000000000101010101010101010202020202020303030303030404050505060606070707080809090A0A0B0C0C0D0E0E0F101011121313141516171818191A1B1C1D1D1E1F20><FFFEFDFCFCFBFAF9F8F7F7F6F5F4F3F2F2F1F0EFEEEDEDECEBEAE9E8E7E7E6E5E4E3E2E2E1E0DFDEDDDDDCDBDAD9D8D7D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C8C8C7C6C5C4C3C2C2C1C0BFBEBDBDBCBBBAB9B8B8B7B6B5><595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>04 %_Br<040404030303030303030303030303030302020202020202020101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><0001010203040507080A0B0D0E10111214151618191A1C1D1E202123242527282A2B2C2E2F3032333334363738393B3C3D3E404143444647494A4C4D4E4F515253555658595A5C5D5E60616264656668696A6B6D6E6F717274757678797A7C7D7F808183848687888A8B8C8E8F909293949697999A9C9E9E9FA0A2A3A4A6A7A8AAABACADAEAFB0B1B2B4B5B6B8B9BABBBCBEBFC0C1C2C3C4C5C6C7C8C9CACB><7778797A7C7D7E80818283848586868788898A8B8C8D8E8F90909192949595969798999A9B9C9D9E9FA0A1A2A3A4A5A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B5B6B7B8B9BABBBCBEBEBFC0C1C2C3C4C5C6C7C7C8C9CACBCCCDCECFD0D1D2D2D4D5D5D6D7D9DADBDCDEDFDFE1E2E3E4E5E6E7E9EAECEDEEEFF1F2F2F3F4F5F6F6F7F8F9FAFBFBFCFDFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>01<F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89888786858483828180807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59><9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 %_BS%_0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 Bs0.345098 0.984314 0.952941 0.552941 0.380392 0 0 2 50 75 %_BS%_0.345098 0.984314 0.952941 0.552941 0.380392 0 0 2 50 75 Bs0.192157 1 1 0.12549 0.709804 0 0 2 50 50 %_BS%_0.192157 1 1 0.12549 0.709804 0 0 2 50 50 Bs0 0.796078 1 0 1 0.34902 0 2 50 25 %_BS%_0 0.796078 1 0 1 0.34902 0 2 50 25 Bs0.015686 0 0.466667 0 1 0.960784 0.619608 2 50 0 %_BS%_0.015686 0 0.466667 0 1 0.960784 0.619608 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (White, Black)(White, Black) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F50525354555657595A5B5D5E6061626364666768696A6B6C6D6E6F70707172737475767778797A7B7C7D7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBBBCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7D7E7F80818182838384858686878889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACACADADADADADADADAD><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F4041424344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F8081818283848485858687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E80838587898C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 %_BS%_0.74902 0.678431 0.670588 0.901961 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (10 lpi 30%)(10 lpi 30%) 20 0 92 72 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 2.16 w 4 M []0 d0 XR19.75 3.6006 m92.25 3.6006 LS19.75 18 m92.25 18 LS19.75 32.4004 m92.25 32.4004 LS19.75 46.7998 m92.25 46.7998 LS19.75 61.2002 m92.25 61.2002 LS0 61.2002 m14 61.2002 LS19.75 10.7998 m92.25 10.7998 LS19.75 25.2002 m92.25 25.2002 LS19.75 39.6006 m92.25 39.6006 LS19.75 54 m92.25 54 LS19.75 68.4004 m92.25 68.4004 LS0 68.4004 m14 68.4004 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (10 lpi 40%)(10 lpi 40%) 20 0 92 72 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 2.88 w 4 M []0 d0 XR19.75 3.5996 m92.25 3.5996 LS19.75 18 m92.25 18 LS19.75 32.3999 m92.25 32.3999 LS19.75 46.7998 m92.25 46.7998 LS19.75 61.1997 m92.25 61.1997 LS0 61.1997 m14 61.1997 LS19.75 10.7998 m92.25 10.7998 LS19.75 25.1997 m92.25 25.1997 LS19.75 39.5996 m92.25 39.5996 LS19.75 54 m92.25 54 LS19.75 68.3999 m92.25 68.3999 LS0 68.3999 m14 68.3999 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (10 lpi 50%)(10 lpi 50%) 20 0 92 72 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 3.6 w 4 M []0 d0 XR19.75 3.6006 m92.25 3.6006 LS19.75 18 m92.25 18 LS19.75 32.4004 m92.25 32.4004 LS19.75 46.8008 m92.25 46.8008 LS19.75 61.2002 m92.25 61.2002 LS0 61.2002 m14 61.2002 LS19.75 10.8008 m92.25 10.8008 LS19.75 25.2002 m92.25 25.2002 LS19.75 39.6006 m92.25 39.6006 LS19.75 54 m92.25 54 LS19.75 68.4004 m92.25 68.4004 LS0 68.4004 m14 68.4004 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (10 lpi 60%)(10 lpi 60%) 20 0 92 72 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 4.32 w 4 M []0 d0 XR19.75 3.5996 m92.25 3.5996 LS19.75 18 m92.25 18 LS19.75 32.4004 m92.25 32.4004 LS19.75 46.7998 m92.25 46.7998 LS19.75 61.2002 m92.25 61.2002 LS0 61.2002 m14 61.2002 LS19.75 10.7998 m92.25 10.7998 LS19.75 25.2002 m92.25 25.2002 LS19.75 39.5996 m92.25 39.5996 LS19.75 54 m92.25 54 LS19.75 68.4004 m92.25 68.4004 LS0 68.4004 m14 68.4004 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (10 lpi 70%)(10 lpi 70%) 20 0 92 72 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 5.04 w 4 M []0 d0 XR19.75 3.6006 m92.25 3.6006 LS19.75 18 m92.25 18 LS19.75 32.4004 m92.25 32.4004 LS19.75 46.8008 m92.25 46.8008 LS19.75 61.2002 m92.25 61.2002 LS0 61.2002 m14 61.2002 LS19.75 10.8008 m92.25 10.8008 LS19.75 25.2002 m92.25 25.2002 LS19.75 39.6006 m92.25 39.6006 LS19.75 54 m92.25 54 LS19.75 68.4004 m92.25 68.4004 LS0 68.4004 m14 68.4004 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (6 lpi 30%)(6 lpi 30%) 24 0 96 72 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 3.6 w 4 M []0 d0 XR23.75 6 m96.25 6 LS23.75 30 m96.25 30 LS23.75 54 m96.25 54 LS0 54 m16.5 54 LS23.75 18 m96.25 18 LS23.75 42 m96.25 42 LS23.75 66 m96.25 66 LS0 66 m16.5 66 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (6 lpi 80%)(6 lpi 80%) 24 0 96 72 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 9.6 w 4 M []0 d0 XR23.75 6 m96.25 6 LS23.75 30 m96.25 30 LS23.75 54 m96.25 54 LS0 54 m16.5 54 LS23.75 18 m96.25 18 LS23.75 42 m96.25 42 LS23.75 66 m96.25 66 LS0 66 m16.5 66 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (6 lpi 90%)(6 lpi 90%) 23.9995 0 95.9995 72 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 10.8 w 4 M []0 d0 XR23.7495 6 m96.2495 6 LS23.7495 30 m96.2495 30 LS23.7495 54 m96.2495 54 LS0 54 m16.4995 54 LS23.7495 18 m96.2495 18 LS23.7495 42 m96.2495 42 LS23.7495 66 m96.2495 66 LS0 66 m16.4995 66 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Grid .25 inch Lines)(Grid .25 inch Lines) 32 0.2495 104 72.2495 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR31.75 63.2495 m104.25 63.2495 LS31.75 27.2495 m104.25 27.2495 LS0 63.2495 m28 63.2495 LS31.75 45.2495 m104.25 45.2495 LS31.75 9.2495 m104.25 9.2495 LS0 45.2495 m28 45.2495 LS77 72.4995 m77 -0.0005 LS41 72.4995 m41 -0.0005 LS5 68.1865 m5 40.2495 LS95 72.4995 m95 -0.0005 LS59 72.4995 m59 -0.0005 LS23 68.1865 m23 40.2495 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Grid 1cm Lines)(Grid 1cm Lines) 47.5054 0.25 104.1968 56.9424 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR104.4468 42.7695 m47.2554 42.7695 LS38.3457 42.75 m0 42.75 LS47.2554 14.4238 m104.4468 14.4238 LS0 14.4033 m38.3457 14.4033 LS90.0239 0 m90.0239 57.1924 LS33.3457 9.4033 m33.3457 47.75 LS61.6782 57.1924 m61.6782 0 LS5 47.75 m5 9.4033 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa 0 0.901961 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Scotch Rule 1)(Scotch Rule 1) 16 0.3252 89.1201 72.3252 [%AI3_Tile(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer0 J 0 j 0.5 w 4 M []0 d0 XR0 6.3252 m6 0.3252 LF0 0.3252 m6 6.3252 LF%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer2 J 0 j 0.65 w 4 M []0 d0 XR28.7402 0.3252 m28.7402 72.3252 LS47.02 0.3252 m47.02 72.3252 LS65.2998 0.3252 m65.2998 72.3252 LS83.5801 0.3252 m83.5801 72.3252 LS10.46 62.3252 m10.46 72.3252 LS21.54 0.3252 m21.54 72.3252 LS39.8198 0.3252 m39.8198 72.3252 LS58.1001 0.3252 m58.1001 72.3252 LS76.3799 0.3252 m76.3799 72.3252 LS3.2598 62.3252 m3.2598 72.3252 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Scotch Rule 3)(Scotch Rule 3) 22.4014 4.7998 105.2012 76.7998 [%AI3_Tile(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer0 J 0 j 0.5 w 4 M []0 d0 XR6.4014 10.7998 m12.4014 4.7998 LF6.4014 4.7998 m12.4014 10.7998 LF%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer2 J 0 j 9.6 w 4 M []0 d0 XR63.8013 4.7998 m63.8013 76.7998 LS8.6006 64.7998 m8.6006 76.7998 LS36.2012 4.7998 m36.2012 76.7998 LS91.4014 4.7998 m91.4014 76.7998 LS0.4 w72.2012 4.7998 m72.2012 76.7998 LS17.0015 64.7998 m17.0015 76.7998 LS44.6016 4.7998 m44.6016 76.7998 LS99.8018 4.7998 m99.8018 76.7998 LS27.8013 4.7998 m27.8013 76.7998 LS55.4014 4.7998 m55.4014 76.7998 LS0.2002 64.7998 m0.2002 76.7998 LS83.001 4.7998 m83.001 76.7998 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7956.8833 8424.9551 m-7865.0479 8424.9551 L-7865.0479 8420.6758 L-7956.8833 8420.6758 L-7956.8833 8424.9551 Ln0 O0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa-7956.6631 8422.2754 m-7957 8422.3418 -7956.4814 8422.5313 -7956.8833 8422.3887 C-7956.8379 8422.2705 -7956.7725 8422.1816 -7956.6631 8422.2754 Cf-7866.1675 8422.4414 m-7867.2529 8423.2041 -7868.6816 8422.4336 -7869.8701 8422.9199 C-7870.0098 8422.9521 -7869.8354 8422.502 -7870.1484 8422.6025 C-7871.3008 8423.1953 -7873.1162 8422.8418 -7874.5195 8422.3848 C-7874.4346 8422.2666 L-7874.7021 8422.1816 -7875.0283 8422.5723 -7875.3115 8422.5176 C-7875.3135 8422.4395 -7875.2207 8422.4063 -7875.2861 8422.2979 C-7875.3574 8422.5352 -7875.7979 8422.4082 -7875.9189 8422.584 C-7876.0303 8422.4922 -7876.0195 8422.3047 -7876.1641 8422.2002 C-7876.3262 8422.4697 L-7876.7769 8423.1094 -7877.4209 8422.4258 -7878.0361 8422.7559 C-7878.0063 8422.6934 -7877.9453 8422.6445 -7877.9941 8422.584 C-7878.9814 8422.9727 -7880.2168 8422.8994 -7881.3208 8423.043 C-7881.2769 8422.9482 -7881.2363 8422.7754 -7881.3008 8422.668 C-7881.3555 8422.9512 -7881.6963 8423.0225 -7881.9922 8423.0781 C-7882.1255 8422.7871 -7882.4995 8423.3438 -7882.8467 8423.1826 C-7882.8169 8423.1191 L-7883.0732 8423.4238 -7883.1973 8422.9434 -7883.4053 8423.3086 C-7883.5684 8423.0801 L-7883.6807 8423.4902 -7883.9395 8422.8672 -7884.1514 8423.0762 C-7884.1445 8423.1602 L-7884.3442 8423.2598 -7884.4482 8423.0537 -7884.6338 8423.123 C-7884.6514 8423.0762 L-7885.0854 8423.1826 -7885.3379 8422.9551 -7885.3271 8423.2754 C-7885.4795 8423.0186 -7884.9063 8423.1582 -7885.1455 8422.7842 C-7886.5732 8423.1152 -7888.0459 8423.0498 -7889.4834 8423.0566 C-7889.6465 8422.9277 -7889.7505 8422.8887 -7889.7871 8422.7666 C-7889.9307 8422.832 -7890.3281 8422.8262 -7890.4585 8422.9902 C-7890.4102 8422.9834 -7890.5513 8422.8262 -7890.6274 8422.8105 C-7890.8887 8422.6895 -7890.9131 8423.1621 -7891.2002 8423.0186 C-7891.0859 8422.9336 -7891.0469 8422.8301 -7891.0854 8422.7109 C-7891.3301 8422.9609 -7891.6577 8422.9209 -7891.9473 8423.002 C-7891.9023 8422.9482 -7891.8325 8422.916 -7891.8433 8422.8154 C-7892.1602 8423.0986 -7892.4209 8422.7559 -7892.6982 8422.9346 C-7892.5947 8422.75 L-7893.0415 8422.5254 -7892.7266 8423.1367 -7893.1128 8423.0039 C-7893.02 8422.9453 -7893.0527 8422.873 -7893.0361 8422.7979 C-7893.3965 8423.1338 -7893.9795 8423.0225 -7894.3389 8423.1367 C-7894.3174 8423.1113 -7894.3232 8423.0605 Y-7894.7148 8423.1025 -7895.1245 8422.998 -7895.5552 8423.1445 C-7895.7119 8423.0625 -7895.5039 8422.6934 -7895.9185 8422.7617 C-7895.9033 8423.1328 -7896.6221 8422.9141 -7896.3779 8423.334 C-7896.7319 8423.2734 -7897.2925 8423.1338 -7897.5283 8423.2598 C-7897.3691 8423.1191 -7897.7007 8422.8066 -7897.4063 8422.7754 C-7897.6289 8422.5498 L-7897.5957 8422.3984 -7897.3999 8422.6016 -7897.4707 8422.4102 C-7897.6182 8422.4258 -7898.0479 8422.5723 -7898.1797 8422.5117 C-7898.4531 8422.7393 -7898.7041 8423.1641 -7899.1465 8423.2109 C-7898.9385 8423.0664 -7899.2646 8422.8018 -7899.1235 8422.7383 C-7899.7407 8423.4482 L-7899.8877 8423.4658 -7899.7725 8423.1563 -7899.9854 8423.2529 C-7899.9746 8423.3506 -7900.0674 8423.4121 -7900.1318 8423.4922 C-7900.1875 8423.4482 -7900.7441 8423.584 -7900.8081 8423.2178 C-7900.8735 8423.0762 -7900.5684 8423.1426 -7900.7314 8423.0117 C-7901.0029 8423.0146 -7901.0151 8423.1406 -7901.2871 8423.1465 C-7901.2925 8423.0977 L-7901.4717 8423.043 -7901.8213 8423.2529 -7901.6265 8423.4551 C-7901.5015 8423.4658 -7901.6738 8423.2354 -7901.4888 8423.3418 C-7901.6152 8423.5537 -7901.9312 8423.6133 -7902.2031 8423.6162 C-7902.1104 8423.5586 -7902.1216 8423.4609 -7902.0845 8423.3574 C-7902.4497 8423.6445 -7902.8369 8423.7354 -7903.2451 8423.8555 C-7903.2515 8424.0293 -7903.0928 8423.5391 -7903.0327 8423.6309 C-7903.5557 8423.3896 -7904.1128 8423.9727 -7904.5479 8423.6201 C-7904.4766 8423.5898 -7904.5098 8423.8672 -7904.5146 8423.8184 C-7904.7666 8423.7969 -7904.7549 8423.5449 -7904.9189 8423.6377 C-7904.9355 8423.4902 -7905.1255 8423.6855 -7905.2944 8423.7305 C-7905.3818 8423.8369 -7905.3384 8423.6582 -7905.1914 8423.6426 C-7905.4268 8423.7666 -7906.3691 8423.9941 -7906.9131 8423.7793 C-7906.9023 8423.877 -7907.2471 8424.1377 -7907.3721 8424.127 C-7907.3232 8423.8984 L-7907.4375 8423.7617 -7907.7422 8423.918 -7907.7632 8423.7227 C-7908.0303 8424 -7906.7344 8423.4863 -7907.0957 8423.7002 C-7907.1895 8423.5098 -7907.5991 8424.0645 -7907.5215 8423.7529 C-7907.7725 8423.7617 -7908.0161 8424.0186 -7908.2559 8423.8047 C-7908.1865 8423.8418 -7908.0522 8423.4873 -7908.2549 8423.5039 C-7908.6123 8423.5449 -7908.3564 8423.6133 -7908.6465 8423.6895 C-7908.8281 8423.7832 L-7908.8398 8424.0059 -7909.1475 8423.7529 -7909.0146 8424.002 C-7909.0586 8423.8184 -7909.5337 8424.1152 -7909.4971 8423.7461 C-7909.4473 8423.4551 L-7909.6016 8423.4766 -7909.7002 8423.7617 -7909.8213 8423.8896 C-7909.8418 8423.8633 -7909.8823 8423.8047 -7909.8745 8423.7578 C-7909.8994 8424.2031 -7910.2432 8423.7207 -7910.4268 8424.0645 C-7910.7505 8423.9102 -7911.2495 8424.0498 -7911.4023 8423.7734 C-7911.6514 8423.9082 -7911.8784 8424.0674 -7912.1621 8423.9727 C-7912.1055 8423.9307 -7912.0283 8423.918 -7912.0122 8423.8223 C-7912.1904 8423.6914 -7912.2344 8423.8086 -7912.3975 8423.8809 C-7912.3608 8423.8145 -7912.7539 8423.6201 -7912.9521 8423.4629 C-7913.1992 8423.5957 -7913.1143 8423.8359 -7913.1392 8423.9824 C-7913.3652 8423.543 -7913.8379 8424.2656 -7914.1211 8423.8672 C-7914.0352 8423.8066 -7913.7598 8423.6514 -7913.9658 8423.541 C-7914.1919 8423.1025 -7914.4219 8423.8643 -7914.7861 8423.6543 C-7914.6968 8424.0186 L-7914.8594 8423.793 -7915.2334 8424.2305 -7915.1963 8423.8594 C-7915.3184 8423.9902 -7915.6265 8423.7383 -7915.5859 8424.0938 C-7916.1846 8423.793 -7917.0425 8424.2754 -7917.4102 8423.6377 C-7917.4961 8423.6973 -7917.7104 8423.6367 -7917.6665 8423.8193 C-7917.5239 8424.0176 -7917.4673 8423.6777 -7917.4141 8423.8125 C-7917.4912 8423.8232 -7917.5078 8423.9209 -7917.5161 8423.9697 C-7917.7021 8423.8887 -7917.8486 8423.8633 -7917.6729 8423.5674 C-7918.0869 8423.3477 -7918.1001 8424.1719 -7918.6274 8424.0322 C-7918.6035 8423.8857 -7918.6436 8423.8301 -7918.7979 8423.8535 C-7919.0903 8424.1055 L-7919.4312 8424.0469 -7919.2842 8423.7705 -7919.2925 8423.5215 C-7919.4746 8423.5645 -7919.6973 8423.5527 -7919.7803 8423.7383 C-7920.0015 8423.4258 L-7919.8398 8423.6514 -7920.1514 8423.5762 -7920.2368 8423.6367 C-7920.1514 8423.5762 L-7920.1846 8423.4697 -7920.3955 8423.5352 -7920.5024 8423.5664 C-7920.4766 8423.7207 -7920.2617 8423.7832 -7920.1445 8423.8281 C-7920.2373 8423.9375 -7920.3823 8423.9121 -7920.5059 8424.041 C-7920.4648 8423.7969 -7920.8027 8423.8672 -7920.9473 8423.8418 C-7921.1133 8423.7891 -7921.1348 8424.0605 -7921.1831 8424.0527 C-7921.1875 8423.9258 -7921.4541 8424.0313 -7921.3247 8423.8535 C-7921.2681 8423.8125 -7921.1953 8423.9766 -7921.1016 8423.8643 C-7921.2109 8423.7705 -7921.1982 8423.5498 -7921.4258 8423.7109 C-7921.5967 8423.832 -7921.3818 8424.1934 -7921.7061 8424.0391 C-7921.6211 8423.9785 -7921.6055 8423.8809 -7921.5391 8423.793 C-7921.8433 8423.666 L-7921.8564 8423.8887 L-7921.8975 8423.832 -7921.8691 8423.8125 -7921.8877 8423.7832 C-7921.9785 8424.0176 -7922.3521 8423.8555 -7922.4209 8424.1191 C-7922.5742 8424.1426 -7922.7441 8423.9648 -7922.8906 8423.9395 C-7922.8623 8423.9199 L-7923.0415 8423.7891 -7923.2793 8423.875 -7923.4297 8424.0254 C-7923.4219 8423.9766 L-7923.5195 8423.959 -7923.7505 8423.9941 -7923.8735 8424.125 C-7924.1201 8423.957 -7923.9561 8423.2842 -7924.2295 8423.5645 C-7924.48 8423.5723 -7924.6221 8423.9727 -7924.5215 8424.1152 C-7924.9717 8423.9648 -7925.4834 8424.3281 -7925.9009 8423.9824 C-7925.9658 8424.0723 -7925.9248 8424.1289 -7926.0586 8424.1816 C-7926.7197 8424.0938 -7927.4551 8424.4453 -7927.9814 8424.0078 C-7927.79 8423.9141 -7927.9688 8423.7842 -7927.9727 8423.6582 C-7928.1309 8423.8574 -7928.1631 8423.4512 -7928.2197 8423.793 C-7928.2041 8423.9941 -7928.2197 8424.0918 -7928.0337 8424.1729 C-7928.4282 8424.2813 -7929.0283 8424.2813 -7929.2471 8424.0938 C-7929.1377 8424.1865 -7929.2227 8424.248 -7929.3086 8424.3086 C-7929.2803 8423.9873 -7929.5713 8423.9395 -7929.7915 8424.0527 C-7929.8223 8424.248 L-7929.9658 8424.0469 L-7930.0503 8424.1094 -7930.0591 8424.457 -7930.2773 8424.2695 C-7930.2891 8424.1934 -7930.3018 8424.1162 -7930.3418 8424.0605 C-7930.5693 8424.2207 -7930.8906 8424.4922 -7931.1377 8424.3262 C-7931.3398 8424.041 L-7931.4453 8424.0723 -7931.6235 8424.2441 -7931.4375 8424.3262 C-7931.8594 8424.1543 -7932.1309 8424.1328 -7932.2646 8423.8857 C-7932.9912 8424.4873 -7934.0459 8424.5117 -7934.8906 8424.4688 C-7934.8652 8424.3223 L-7935.0923 8424.1855 -7934.9834 8424.5781 -7935.1416 8424.4766 C-7935.0684 8424.3369 -7935.3145 8424.1729 -7935.1362 8424.002 C-7935.4609 8423.8477 -7935.5547 8424.2559 -7935.7656 8424.3223 C-7935.7979 8424.5146 -7935.5957 8424.1992 -7935.6367 8424.4434 C-7935.6729 8424.5117 -7936.0859 8424.293 -7936.1362 8424.584 C-7936.2178 8424.4697 -7936.1543 8424.2559 -7936.1104 8424.1377 C-7936.3086 8424.2793 L-7936.5513 8423.9395 -7935.7559 8423.6719 -7936.0107 8423.2529 C-7936.1934 8423.2979 L-7936.3682 8422.9941 -7935.71 8422.9551 -7936.1689 8422.8506 C-7936.3682 8422.9941 -7936.5381 8423.416 -7936.3608 8423.5449 C-7936.7754 8423.625 -7936.5527 8424.2383 -7936.9985 8424.2139 C-7937.1201 8424.043 -7936.6416 8424.1729 -7936.7275 8423.9336 C-7936.9375 8423.6992 -7937.1484 8424.0645 -7937.3354 8423.9824 C-7937.1279 8424.0918 -7937.3032 8424.3857 -7937.4375 8424.4395 C-7937.6641 8424.3018 -7937.29 8424.1641 -7937.6113 8424.1338 C-7937.6641 8424.3018 -7937.9595 8424.4277 -7937.7041 8424.5449 C-7937.8203 8424.9258 -7938.0381 8424.4395 -7938.2129 8424.7344 C-7938.3174 8424.4658 -7937.8823 8424.1152 -7938.2354 8423.9814 C-7938.1792 8424.2393 -7938.6704 8424.332 -7938.4839 8424.7139 C-7938.6221 8424.6406 -7938.6367 8424.4375 -7938.5361 8424.2793 C-7938.7334 8424.1201 -7939.0151 8424.75 -7939.0801 8424.2383 C-7939.1479 8424.502 L-7939.21 8424.416 -7939.2983 8424.3506 -7939.3994 8424.209 C-7939.5732 8424.2041 -7939.96 8424.5664 -7939.9443 8424.168 C-7940 8424.209 -7940.3975 8424.1914 -7940.2441 8424.4658 C-7939.9971 8424.6338 -7939.96 8424.2656 -7939.8223 8424.6377 C-7939.9971 8424.334 -7940.1787 8424.6777 -7940.3213 8424.7793 C-7940.3447 8424.625 L-7940.4297 8424.6855 -7940.6255 8424.6514 -7940.6787 8424.8184 C-7940.6133 8424.7305 -7940.6475 8424.625 -7940.7148 8424.5879 C-7940.8042 8424.8223 L-7941.1494 8424.9395 -7940.8857 8424.4102 -7941.2217 8424.4785 C-7940.9663 8424.2969 L-7941.0225 8424.3359 -7941.1367 8424.1162 -7941.2979 8424.1895 C-7941.3604 8424.4033 -7941.4775 8424.6602 -7941.5313 8424.8262 C-7941.7207 8424.9199 -7941.6162 8424.585 -7941.8027 8424.8047 C-7941.5586 8424.5469 L-7941.5215 8424.4766 -7941.7231 8424.1934 -7941.9761 8424.1992 C-7942.1377 8424.2734 -7942.3887 8424.582 -7942.1338 8424.6992 C-7942.2607 8424.7031 -7942.4385 8424.5723 -7942.3379 8424.416 C-7942.6255 8424.4902 -7942.2998 8424.6465 -7942.5479 8424.7793 C-7942.6494 8424.6367 -7942.9658 8424.4336 -7943.1563 8424.2266 C-7942.8975 8423.8682 L-7943.0693 8423.8643 L-7942.8467 8423.5781 -7943.1826 8423.6465 -7943.0566 8423.3438 C-7943.1743 8423.2969 -7943.3169 8423.3994 -7943.4307 8423.4785 C-7943.0864 8423.9629 -7943.8159 8424.1406 -7943.7158 8424.582 C-7944.1875 8424.7031 -7944.0107 8423.5078 -7944.5024 8424.1992 C-7944.4219 8424.3145 -7944.6533 8424.6504 -7944.3564 8424.5225 C-7944.6494 8424.4746 -7944.5557 8424.9658 -7944.9014 8424.7832 C-7944.6455 8424.6016 -7945.1763 8424.3359 -7944.8066 8424.0723 C-7944.8311 8424.2178 -7944.6001 8424.1826 -7944.5435 8424.1426 C-7944.6641 8423.9727 -7944.5186 8423.6973 -7944.8184 8423.6973 C-7945.0015 8423.7393 -7945.2524 8423.748 -7945.2158 8423.9785 C-7945.2085 8424.2314 -7944.9365 8423.9512 -7945.0537 8424.207 C-7945.4185 8424.2949 -7945.4795 8423.9102 -7945.6304 8424.3594 C-7945.3999 8424.3232 -7945.3423 8424.584 -7945.3467 8424.7578 C-7945.6143 8424.8633 L-7945.5625 8424.6953 L-7945.9922 8424.5742 -7945.6895 8425 -7946.1055 8424.9551 C-7946.3008 8424.623 L-7946.2017 8424.3369 -7945.6953 8424.75 -7945.7695 8424.2842 C-7946.04 8424.2656 -7946.1299 8424.502 -7946.3848 8424.3818 C-7946.3281 8424.3418 -7946.2505 8424.3301 -7946.1943 8424.2891 C-7946.2915 8424.2734 -7946.3877 8423.6563 -7946.7734 8424.0176 C-7946.9727 8424.1582 -7946.8262 8424.1826 -7946.8311 8424.3574 C-7947.2656 8424.4102 -7947.3955 8424.5879 -7947.6753 8424.6152 C-7947.6177 8424.2754 -7948.1699 8424.582 -7947.8608 8424.2344 C-7947.7188 8424.4336 -7947.0903 8424.4141 -7946.9365 8424.0898 C-7947.0947 8423.6865 -7946.5952 8424.1465 -7946.5024 8423.7383 C-7946.8506 8423.7285 -7946.8335 8423.332 -7946.8896 8423.0723 C-7946.9863 8423.0537 -7947.0801 8423.1641 -7947.1377 8423.2041 C-7947.1787 8423.4482 -7947.0522 8423.4453 -7947.0449 8423.6973 C-7947.4336 8423.6309 -7947.8081 8423.7666 -7948.0225 8424.0059 C-7948.1523 8423.8848 -7948.1113 8423.6406 -7947.9575 8423.6162 C-7948.4199 8423.6895 -7948.9141 8423.6563 -7949.3535 8423.582 C-7949.0693 8423.9814 -7949.8433 8423.6758 -7949.6494 8424.0078 C-7949.4141 8424.0977 -7949.2119 8424.3818 -7949.3418 8424.5605 C-7949.4888 8424.5352 -7949.3369 8424.3857 -7949.3984 8424.3008 C-7949.5859 8424.5186 -7949.6895 8423.9512 -7949.8735 8424.2949 C-7949.4512 8424.166 -7949.7915 8423.8086 -7949.7139 8423.4961 C-7950.0186 8423.6719 -7949.7007 8423.2734 -7950.0024 8423.2734 C-7950.3057 8423.4473 -7950.6787 8423.584 -7951.0161 8423.6514 C-7951.4399 8423.3555 -7952.0898 8423.6465 -7952.4683 8423.6582 C-7952.6665 8423.5 -7952.5322 8423.1465 -7952.7471 8423.085 C-7952.9995 8423.0918 -7952.5601 8423.4658 -7952.9336 8423.3047 C-7952.8975 8423.2344 L-7953.0107 8423.3154 -7953.5825 8422.9941 -7953.6929 8423.502 C-7953.5776 8423.1191 L-7953.6475 8423.084 -7953.7119 8423.1719 -7953.7695 8423.2129 C-7953.7725 8423.0879 -7953.8535 8422.9746 -7953.7402 8422.8926 C-7953.9707 8422.6289 -7954.2241 8422.9346 -7954.4746 8422.9453 C-7954.3135 8423.1719 L-7954.7422 8423.3496 -7955.0293 8423.125 -7955.4443 8423.2041 C-7955.4316 8422.9824 L-7955.6787 8423.1152 L-7955.6182 8422.8994 -7955.8447 8422.7617 -7955.9751 8422.9414 C-7955.3335 8422.3984 L-7955.1553 8422.5293 -7955.5283 8422.666 -7955.4165 8422.8848 C-7955.3213 8423.0762 -7954.9375 8423.0146 -7954.8755 8422.8018 C-7955.0225 8422.7773 -7955.0293 8422.8262 -7955.1436 8422.9063 C-7955.1919 8422.5977 -7954.9688 8422.6094 -7954.8584 8422.4033 C-7954.9355 8422.416 -7955.0449 8422.3223 -7955.0615 8422.4199 C-7954.9102 8422.2695 -7954.7578 8422.2461 -7954.5059 8422.2383 C-7954.6763 8422.3594 -7954.4131 8422.4297 -7954.4775 8422.5176 C-7954.4575 8422.2461 -7954.2168 8422.1621 -7953.9053 8422.2383 C-7953.6831 8422.5527 -7953.3208 8422.0361 -7952.96 8422.123 C-7953.1064 8422.3984 -7953.2935 8422.6191 -7953.5127 8422.7305 C-7953.2861 8422.8682 -7953.2607 8422.7227 -7953.0337 8422.8613 C-7952.9238 8422.6563 -7952.8457 8422.3418 -7952.5503 8422.2168 C-7952.5342 8422.4199 L-7952.2666 8422.3154 -7952.2666 8422.0146 -7951.9258 8422.0723 C-7951.3418 8422.1719 -7950.7407 8422.1719 -7950.2949 8422.1973 C-7950.2783 8422.3994 L-7950.0303 8421.9658 -7949.4521 8422.2393 -7949.1182 8422.0469 C-7948.5503 8422.2422 -7947.8848 8421.8535 -7947.5938 8422.2031 C-7946.5913 8422.0469 -7945.7148 8421.8945 -7944.6768 8421.9688 C-7944.8516 8422.2637 L-7944.6655 8422.0469 -7944.7305 8422.4336 -7944.5479 8422.3896 C-7944.7578 8422.1543 -7944.2949 8422.084 -7944.1665 8421.9033 C-7943.7041 8422.1328 -7943.1104 8421.8818 -7942.7007 8421.6758 C-7942.6846 8421.8789 L-7942.2705 8421.498 -7941.7759 8421.832 -7941.2598 8421.8945 C-7941.2007 8421.9785 -7941.1074 8422.1689 -7940.9536 8422.1465 C-7940.6738 8421.8184 -7940.5273 8421.8418 -7940.1167 8421.6367 C-7939.8169 8421.6367 -7939.3301 8421.7178 -7939.0254 8421.8457 C-7937.8975 8421.3848 -7936.7456 8421.6797 -7935.5732 8421.4023 C-7935.4888 8421.6406 L-7934.3521 8421.1309 -7932.9541 8421.5938 -7931.9839 8421.332 C-7932.0776 8421.7393 L-7931.7734 8421.8643 -7931.3843 8421.6328 -7931.4619 8421.3438 C-7931.1567 8421.4688 -7930.7007 8421.1465 -7930.5068 8421.4814 C-7930.1953 8421.5566 -7930.1255 8421.293 -7929.8662 8421.2383 C-7929.2422 8421.3926 -7929.0107 8421.3574 -7928.4224 8421.2813 C-7928.5684 8421.2559 L-7928.6328 8421.3457 -7928.6387 8421.5186 -7928.4922 8421.5449 C-7928.2725 8421.4307 -7927.6846 8421.6543 -7927.9033 8421.168 C-7927.2754 8421.4482 -7926.4385 8420.9395 -7925.8271 8421.3184 C-7925.8789 8421.1855 -7925.7246 8421.1602 -7925.6602 8421.0703 C-7925.1089 8421.0645 -7924.5293 8421.3359 -7924.0898 8421.1094 C-7924.0024 8421.1758 -7924.2295 8421.3359 -7924.0049 8421.3496 C-7923.8721 8421.2979 -7924.0024 8421.1758 -7923.8384 8421.1016 C-7922.9453 8420.8535 -7922.0303 8421.3574 -7921.2188 8421.293 C-7919.7754 8421.0361 -7918.2695 8421.166 -7916.8867 8421.123 C-7916.9023 8421.2207 L-7916.4395 8420.8477 -7915.8159 8421.6025 -7915.4463 8421.041 C-7915.3369 8421.1338 -7915.0283 8421.085 -7915.1094 8421.2734 C-7914.7407 8421.0098 -7914.0771 8421.5215 -7913.5439 8421.1865 C-7913.5928 8421.1777 -7913.6211 8421.1973 -7913.6777 8421.2393 C-7913.1392 8421.4551 -7912.6641 8421.1602 -7912.0957 8421.3555 C-7912.1533 8421.3975 -7912.2583 8421.4277 -7912.2754 8421.5254 C-7912.0557 8421.7129 -7911.7549 8421.1133 -7911.6348 8421.584 C-7911.5088 8421.5801 -7911.5449 8421.3477 -7911.6221 8421.3613 C-7910.3779 8421.5449 -7909.0498 8421.2441 -7907.7549 8421.1367 C-7906.8271 8421.418 -7907.6982 8421.9297 -7906.9663 8421.5781 C-7906.9063 8421.6689 -7906.9229 8421.3984 -7906.9131 8421.4961 C-7906.6299 8421.3643 -7906.4717 8422.0215 -7906.2754 8421.7754 C-7906.3564 8421.4863 -7906.1445 8421.6133 -7906.1387 8421.4375 C-7905.5713 8421.625 -7905.4575 8421.8857 -7905.0098 8421.666 C-7905.0435 8421.8184 L-7904.5186 8421.3887 -7903.9102 8421.6191 -7903.4673 8421.123 C-7900.5728 8421.0322 -7897.7983 8420.7578 -7894.9761 8420.7002 C-7892.1865 8420.7949 -7889.4551 8420.5723 -7886.6221 8420.8359 C-7885.9585 8421.2354 -7885.9087 8421.2246 -7885.1797 8421.0625 C-7885.2095 8421.127 -7885.2549 8421.1426 -7885.2061 8421.2031 C-7885.1699 8420.875 -7884.6929 8421.1719 -7884.6235 8420.8594 C-7883.5762 8420.9199 -7882.6113 8420.8301 -7881.5337 8420.8281 C-7881.7041 8420.8633 -7881.7896 8421.1309 -7881.5869 8421.1094 C-7881.3755 8420.8994 L-7881.3408 8420.9922 L-7881.2021 8420.9434 -7881.0513 8420.7813 -7881.1943 8420.6758 C-7878.4873 8420.3926 -7875.8242 8421.0498 -7873.1729 8420.9697 C-7872.5439 8421.1064 -7871.6475 8420.9814 -7870.9629 8420.9141 C-7868.9355 8421.3506 -7867.1084 8421.7041 -7865.0479 8421.3984 C-7865.3174 8422.2461 -7866.1675 8422.4414 Vf-7956.2578 8422.2422 m-7956.1855 8422.4063 -7955.9497 8422.4961 -7956.1377 8422.7139 C-7956.1611 8422.5605 -7956.2822 8422.3887 -7956.2578 8422.2422 Cf-7949.9619 8423.9297 m-7949.9536 8423.8809 -7949.8721 8423.9961 -7949.8521 8424.0225 C-7949.9297 8424.0352 -7950.0024 8424.1729 -7950.0645 8424.0879 C-7949.9854 8424.0762 -7949.9976 8423.998 -7949.9619 8423.9297 Cf-7948.3521 8424.0273 m-7948.3765 8424.1729 -7948.7207 8424.2891 -7948.9238 8424.3066 C-7948.3521 8424.0273 Lf-7946.8521 8424.6289 m-7946.7227 8424.752 -7946.7583 8424.8193 -7946.9326 8424.8154 C-7946.9453 8424.7383 -7946.8877 8424.6992 -7946.8521 8424.6289 Cf-7946.7456 8424.2969 m-7946.6211 8424.293 -7946.5591 8424.3789 -7946.4985 8424.4629 C-7946.5029 8424.3369 -7946.7871 8424.541 -7946.7456 8424.2969 Cf-7943.4893 8424.7207 m-7943.4111 8424.709 -7943.2417 8424.5879 -7943.1689 8424.75 C-7943.2505 8424.6367 -7943.5498 8424.9346 -7943.4893 8424.7207 Cf-7941.9761 8424.5 m-7941.9272 8424.5098 -7941.9072 8424.5361 -7941.8506 8424.4961 C-7941.7607 8424.5625 -7941.8555 8424.6689 -7941.9312 8424.6826 C-7941.9761 8424.5 Lf-7914.4287 8423.9141 m-7914.5923 8423.9863 L-7914.5684 8423.8418 L-7914.4287 8423.9141 Lf-7902.3574 8423.9063 m-7902.1943 8423.8145 -7902.2441 8424.043 -7902.2168 8424.0645 C-7902.3643 8424.0801 -7902.1621 8423.8848 -7902.3574 8423.9063 Cf-7895.8486 8423.1777 m-7895.8984 8423.1816 L-7895.8818 8422.8818 L-7895.8486 8423.1777 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 1)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7289.3042 8425 L-7289.3042 8378.3496 L-7957 8378.3496 L-7957 8425 Ln*u%AI3_Note:<< /operation /union >>1 D0 O0 g1 XR-7957 8390.4219 m-7320.2319 8390.4219 L-7320.2319 8378.3496 L-7289.3042 8401.6748 L-7320.2319 8425 L-7320.2319 8412.9277 L-7957 8412.9277 L-7957 8390.4219 Lf*UU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 14)0 Au%AI3_Note:0 D0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7677.3848 8425 L-7677.3848 8404.9141 L-7957 8404.9141 L-7957 8425 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7957 8416.3594 m-7732.5117 8416.3594 L-7726.1133 8419.6475 -7709.6582 8425 -7699.8271 8425 c-7687.4336 8425 -7677.3848 8421.9287 -7677.3848 8414.9561 c-7677.3848 8407.9834 -7687.4336 8404.9141 -7699.8271 8404.9141 c-7709.8867 8404.9141 -7726.8936 8410.6426 -7732.9521 8413.7783 C-7957 8413.7783 L-7957 8416.3594 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 7)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7677.3848 8425 L-7677.3848 8399.75 L-7957 8399.75 L-7957 8425 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7957 8413.7793 m-7723.4775 8413.7793 L-7717.0801 8417.0664 -7709.6582 8425 -7699.8271 8425 c-7687.4336 8425 -7677.3848 8419.3477 -7677.3848 8412.375 c-7677.3848 8405.4023 -7687.4336 8399.75 -7699.8271 8399.75 c-7709.8867 8399.75 -7717.8604 8408.0605 -7723.9185 8411.1953 C-7957 8411.1953 L-7957 8413.7793 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pattern)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7680.0454 8425 L-7680.0454 8396.127 L-7957 8396.127 L-7957 8425 Ln1 Ap0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7680.0454 8410.5625 m-7934.5898 8425 -7942.5625 8425 v-7950.5361 8425 -7957 8418.5361 -7957 8410.5625 c-7957 8402.5898 -7950.5361 8396.127 -7942.5625 8396.127 c-7934.5898 8396.127 -7680.0454 8410.5625 yfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pattern 20)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7687.8701 8425 L-7687.8701 8415.46 L-7957 8415.46 L-7957 8425 Ln1 Ap0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7957 8420.2295 m-7695.2744 8425 -7692.6406 8425 v-7690.0059 8425 -7687.8701 8422.8643 -7687.8701 8420.2295 c-7687.8701 8417.5938 -7690.0059 8415.46 -7692.6406 8415.46 c-7695.2744 8415.46 -7957 8420.2295 yfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pattern 23)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-7957 8424.915 m-7687.8711 8424.915 L-7687.8711 8391.582 L-7957 8391.582 L-7957 8424.915 Ln1 Ap0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7868.5215 8406.6797 m-7873.7529 8406.7744 -7878.2148 8391.4912 -7883.2031 8391.582 c-7886.8379 8391.6475 -7891.0625 8407.0889 -7894.5322 8407.1514 c-7908.1494 8407.3994 -7957 8408.29 y-7948.6846 8408.4414 -7935.0015 8408.6904 v-7932.4336 8408.7373 -7925.6777 8424.8613 -7922.7524 8424.915 c-7918.1182 8425 -7917.0586 8409.0176 -7911.6514 8409.1152 c-7836.6035 8410.4805 -7694.5771 8413.0586 -7692.6406 8413.0586 c-7690.0059 8413.0586 -7687.8711 8410.9248 -7687.8711 8408.29 c-7687.8711 8405.6553 -7690.0059 8403.5186 -7692.6406 8403.5186 c-7694.2485 8403.5186 -7792.3066 8405.2949 -7868.5215 8406.6797 cfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pattern 3)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7687.8701 8425 L-7687.8701 8415.459 L-7957 8415.459 L-7957 8425 Ln1 Ap0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7687.8701 8420.2295 m-7949.5952 8425 -7952.2295 8425 v-7954.8643 8425 -7957 8422.8643 -7957 8420.2295 c-7957 8417.5957 -7954.8643 8415.459 -7952.2295 8415.459 c-7949.5952 8415.459 -7687.8701 8420.2295 yfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pattern 5)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7687.8706 8425 L-7687.8706 8403.5225 L-7957 8403.5225 L-7957 8425 Ln1 Ap0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7776.3491 8418.6201 m-7771.1177 8418.7148 -7766.6558 8403.4316 -7761.6675 8403.5225 c-7758.0327 8403.5879 -7753.8081 8419.0293 -7750.3384 8419.0918 c-7714.2485 8419.749 -7687.8706 8420.2305 y-7949.5957 8425 -7952.2295 8425 v-7954.8643 8425 -7957 8422.8652 -7957 8420.2305 c-7957 8417.5957 -7954.8643 8415.459 -7952.2295 8415.459 c-7950.6221 8415.459 -7852.5635 8417.2354 -7776.3491 8418.6201 cfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pattern 6)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-7957 8424.916 m-7687.8706 8424.916 L-7687.8706 8391.582 L-7957 8391.582 L-7957 8424.916 Ln1 Ap0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7776.3491 8406.6797 m-7771.1177 8406.7754 -7766.6558 8391.4922 -7761.6675 8391.582 c-7758.0327 8391.6475 -7753.8081 8407.0898 -7750.3384 8407.1514 c-7736.7212 8407.3994 -7687.8706 8408.291 y-7696.1865 8408.4424 -7709.8696 8408.6914 v-7712.4375 8408.7383 -7719.1929 8424.8623 -7722.1187 8424.916 c-7726.7524 8425 -7727.8125 8409.0176 -7733.2192 8409.1152 c-7808.2671 8410.4805 -7950.2935 8413.0586 -7952.2295 8413.0605 c-7954.8643 8413.0605 -7957 8410.9258 -7957 8408.291 c-7957 8405.6563 -7954.8643 8403.5186 -7952.2295 8403.5186 c-7950.6221 8403.5186 -7852.5635 8405.2949 -7776.3491 8406.6797 cfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/ Adobe ArtOnPath Brush Tool/ Art Brush 8/ A) -(dobe ArtOnPath Brush Tool/ Art Brush 1/ Adobe ArtOnPath Brush ) -(Tool/ Art Brush 2/ Adobe ArtOnPath Brush Tool/ Art Brush 17/ A) -(dobe ArtOnPath Brush Tool/ Art Brush 3/ Adobe ArtOnPath Brush ) -(Tool/ Art Brush 6/ Adobe ArtOnPath Brush Tool/ Art Brush 5/ Ad) -(obe ArtOnPath Brush Tool/ Art Brush 20/ Adobe ArtOnPath Brush ) -(Tool/ Art Brush 4/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 1)(1 / Unnamed Brush Pat 7/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 17)(1 / Unnamed Brush Pattern 20/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 2)(1 / Unnamed Brush Pattern/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 20)(1 / Unnamed Brush Pattern 23/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 3)(1 / Unnamed Brush Pattern 3/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 4)(1 / Unnamed Brush Pat 1/ / / / / 0 1 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 5)(1 / Unnamed Brush Pattern 5/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 6)(1 / Unnamed Brush Pattern 6/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 8)(1 / Unnamed Brush Pat 14/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -(1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.74902 0.678431 0.670588 0.901961 0 0 0 Xa(Black)Pc0 0.992157 1 0 1 0 0 Xa(RGB Red)Pc0.062745 0 0.964706 0 1 1 0 Xa(RGB Yellow)Pc0.627451 0 1 0 0 1 0 Xa(RGB Green)Pc0.517647 0 0.12549 0 0 1 1 Xa(RGB Cyan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blue)Pc0.270588 0.815686 0 0 1 0 1 Xa(RGB Magenta)Pc0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.87451 0.52549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc(6 lpi 30%) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(6 lpi 30%)Pc(Scotch Rule 3) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Scotch Rule 3)Pc(Scotch Rule 1) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Scotch Rule 1)Pc(Grid .25 inch Lines) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Grid .25 inch Lines)Pc(Grid 1cm Lines) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Grid 1cm Lines)Pc(6 lpi 90%) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(6 lpi 90%)Pc(6 lpi 80%) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(6 lpi 80%)Pc(10 lpi 30%) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(10 lpi 30%)Pc(10 lpi 40%) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(10 lpi 40%)Pc(10 lpi 50%) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(10 lpi 50%)Pc(10 lpi 60%) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(10 lpi 60%)Pc(10 lpi 70%) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(10 lpi 70%)PcBb2 (White, Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(White, Black)PcBb2 (Midday Sky) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Midday Sky)PcBb2 (Sensual Red) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Sensual Red)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(R=241 G=241  B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A1 A0 Ap0 O0.65098 0.556863 0.686274 0.478431 0.258824 0.266667 0.223529 Xa0 J 0 j 1 w 4 M []0 d1 XR0 0 m0 468 L468 468 L468 0 L0 0 Lf0 A*u0.043137 0.992157 0.498039 0 0.894118 0.105882 0.356863 Xa-173.7715 -38.7061 m169.3164 304.3677 l223.6514 358.686 L250.8164 385.8457 L253.3066 388.3716 254.8994 389.8433 256.1641 391.7739 C257.4307 393.709 258.5967 395.7466 259.2393 397.9922 C260.6836 402.4106 260.7656 407.2798 259.5313 411.7651 C257.1426 420.7905 248.9063 427.9351 239.6328 429.02 C235.0166 429.6519 230.2061 428.8569 226.0479 426.8135 C223.9873 425.7676 221.998 424.5229 220.3232 422.8794 C218.4717 421.189 215.915 418.5137 213.7432 416.376 C220.5498 409.5781 L196.8545 412.1499 L194.248 435.8501 L201.0547 429.0522 L203.4492 431.4033 205.2881 433.3901 208.1416 436.041 C211.0752 438.8555 214.54 441.1167 218.1826 442.9316 C225.5137 446.5264 233.8896 447.8901 241.9541 446.8052 C258.251 444.8604 272.6016 432.437 276.8164 416.5576 C278.9863 408.6997 278.8301 400.2402 276.3057 392.479 C275.126 388.5688 273.1689 384.9258 270.9014 381.5527 C268.624 378.1206 265.4883 375.1899 263.4961 373.1631 C236.3311 346.0015 L181.9966 291.6836 l-161.0923 -51.3896 L-173.7715 -38.7061 Lf/BBAccumRotation (0.785398) XT*U/BBAccumRotation (0.785398) XT/ShapeBlendPathType (K) XT/ShapeBlendPathID (B) XTu*u%AI3_Note:<< /operation /union >>1 D0.733333 0.168627 0.109804 0 0.152941 0.647059 0.8 Xa-149.4312 -152.4268 m263.9619 260.9668 L296.7295 228.1982 L317.3672 375.4678 L170.0996 354.8325 L202.8672 322.0591 L-210.5215 -91.3301 L-149.4312 -152.4268 Lf/BBAccumRotation (0.785398) XT*U/BBAccumRotation (0.785398) XT%AI3_Note:0 D0.078431 0.529412 1 0.003922 0.901961 0.541176 0 Xa-149.4316 -146.1279 m-204.2227 -91.3291 L206.0176 318.9102 L209.1699 322.0601 L206.0176 325.21 L179.5703 351.6587 L312.1348 370.2349 L293.5566 237.6729 L267.1123 264.1172 L263.9629 267.2686 L260.8125 264.1172 L-149.4316 -146.1279 L-149.4316 -146.1279 Lf0.580392 0 1 0 0.466667 0.760784 0.113725 Xa-149.4312 -139.8223 m-197.9165 -91.3311 L209.1689 315.7568 L215.4688 322.0591 L209.1689 328.3589 L189.0449 348.4873 L306.9014 365.001 L290.3848 247.1475 L270.2627 267.2686 L263.9609 273.5684 L257.6592 267.2686 L-149.4312 -139.8223 L-149.4312 -139.8223 Lf0.588235 0.478431 0.643137 0.266667 0.380392 0.388235 0.32549 Xa-149.4321 -133.5215 m-191.6152 -91.3301 L212.3184 312.6055 L218.6201 318.9087 L221.7705 322.062 L218.6201 325.21 L212.3184 331.5088 L198.5166 345.3154 L301.6689 359.771 L287.2119 256.6201 L273.4141 270.4194 L267.1113 276.7207 L263.96 279.8667 L260.8096 276.7183 L254.5088 270.4194 L-149.4321 -133.5215 L-149.4321 -133.5215 LfU*u%AI3_Note:<< /operation /union >>1 D0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa-81.6294 -111.8057 m368.6338 338.458 L377.1709 329.9214 L382.5459 368.2842 L344.1836 362.9082 L352.7197 354.3721 L-97.5435 -95.8916 L-81.6294 -111.8057 Lf/BBAccumRotation (0.785398) XT*U/BBAccumRotation (0.785398) XT%AI3_Note:0 D0.580392 0 1 0 0.466667 0.760784 0.113725 Xa-64.0259 -82.5615 m-73.3003 -73.29 L282.7852 282.7974 L284.4707 284.4834 L282.7852 286.1689 L279.3857 289.5684 L302 292.7383 L298.8301 270.1255 L295.4307 273.5244 L293.7441 275.209 L292.0586 273.5244 L-64.0259 -82.5615 L-64.0259 -82.5615 Lfuu*u0.078431 0.529412 1 0.003922 0.901961 0.541176 0 Xa-301.7642 36.0957 m165.9751 36.0957 L173.439 35.9492 175.9546 36.2207 180.4712 38 C184.4399 39.7324 187.8813 42.6289 190.3472 46.207 C192.7319 49.8379 194.1284 54.043 194.2085 58.4141 C194.2896 64.3047 194.231 71.1777 194.2495 77.5098 C194.2495 116.2695 L194.2495 155.0293 L194.1431 161.459 194.561 168.627 193.73 172.002 C192.814 176.2285 190.687 180.1563 187.6353 183.2695 C184.5532 186.3418 180.6577 188.5508 176.4409 189.4922 C173.0581 190.4531 166.1704 189.9629 159.6206 190.0898 C120.8608 190.0898 L82.1001 190.0898 L62.7212 190.0898 L55.8315 189.7344 45.9009 191.377 38.6763 195.5039 C23.3423 203.2148 13.7681 221.5234 14.77 237.4585 C14.77 276.2183 L14.77 314.978 L14.77 334.3579 L14.7778 337.6411 14.7505 340.6997 14.7886 344.1675 C14.8599 348.4458 15.5122 352.7271 16.7261 356.8579 C21.6001 373.4614 36.6196 386.3735 53.8003 388.6079 C55.9175 389.0034 58.0728 388.9722 60.1987 389.0952 C65.0435 389.0952 L74.7339 389.0952 L94.1138 389.0952 L94.1138 401.1675 L124.2349 377.8423 L94.1138 354.5171 L94.1138 366.5894 L74.7339 366.5894 L65.0435 366.5894 L60.1987 366.5894 L59.1079 366.4663 58.0063 366.5698 56.9468 366.3228 C48.356 365.2456 40.6997 358.6558 38.2651 350.3335 C37.6743 348.2573 37.3433 346.1128 37.2935 343.9282 C37.2573 340.938 37.2837 337.5347 37.2759 334.3579 C37.2759 314.978 L37.2759 276.2183 L37.2759 237.4585 L36.8003 227.459 41.5767 219.6914 49.3462 215.3184 C53.5454 213.2617 56.6919 212.4414 62.7212 212.5957 C82.1001 212.5957 L120.8608 212.5957 L159.6206 212.5957 L165.9399 212.3203 172.1392 213.3516 181.4263 211.4395 C189.8394 209.5527 197.606 205.166 203.6489 199.084 C209.6733 192.9707 213.9302 185.1406 215.7378 176.709 C217.4448 167.3633 216.4985 161.4805 216.7554 155.0293 C216.7554 116.2695 L216.7554 77.5098 L216.7339 70.9238 216.8022 64.873 216.7075 57.8477 C216.5386 49.2715 213.7739 40.75 208.9985 33.6133 C204.1587 26.5137 197.3599 20.8105 189.4585 17.3672 C182.0874 13.7441 171.3696 13.3223 165.9751 13.5898 C-301.7642 13.5898 L-301.7642 36.0957 Lf*UUU*u%AI3_Note:<< /operation /union >>1 D0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa-208.6294 -157.8057 m241.6338 292.458 L250.1709 283.9214 L255.5459 322.2842 L217.1836 316.9082 L225.7197 308.3721 L-224.5435 -141.8916 L-208.6294 -157.8057 Lf/BBAccumRotation (0.785398) XT*U/BBAccumRotation (0.785398) XT%AI3_Note:0 D0.078431 0.529412 1 0.003922 0.901961 0.541176 0 Xa-208.6294 -156.3926 m-223.1309 -141.8916 L226.4258 307.6646 L227.1323 308.3716 L226.4258 309.0786 L219.3096 316.1943 L254.3721 321.1099 L249.459 286.0479 L242.3408 293.1655 L241.6338 293.8726 L240.9268 293.1655 L-208.6294 -156.3926 L-208.6294 -156.3926 Lf0.580392 0 1 0 0.466667 0.760784 0.113725 Xa-208.6289 -154.9775 m-221.7139 -141.8926 L227.1338 306.9575 L228.5479 308.3716 L227.1338 309.7861 L221.4375 315.4824 L253.1963 319.9346 L248.7461 288.1738 L243.0479 293.8726 L241.6328 295.2866 L240.2188 293.8726 L-208.6289 -154.9775 L-208.6289 -154.9775 Lf0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa-208.6284 -153.5645 m-220.3003 -141.8926 L227.8413 306.251 L229.2544 307.6646 L229.9609 308.3711 L229.2544 309.0776 L227.8413 310.4932 L223.5649 314.7695 L252.0215 318.7612 L248.0332 290.3008 L243.7549 294.5791 L242.3398 295.9922 L241.6328 296.6987 L240.9268 295.9922 L239.5107 294.5791 L-208.6284 -153.5645 L-208.6284 -153.5645 Lfu0.580392 0 1 0 0.466667 0.760784 0.113725 Xa-173.0259 -102.5615 m-182.3003 -93.29 L173.7852 262.7974 L175.4707 264.4834 L173.7852 266.1689 L170.3857 269.5684 L193 272.7383 L189.8301 250.1255 L186.4307 253.5244 L184.7441 255.209 L183.0586 253.5244 L-173.0259 -102.5615 L-173.0259 -102.5615 Lf0.078431 0.529412 1 0.003922 0.901961 0.541176 0 Xa-173.0254 -99.7324 m-179.4707 -93.2891 L175.2002 261.3818 L176.8848 263.0708 L178.2974 264.4834 L176.8848 265.8984 L175.2002 267.583 L174.6372 268.146 L190.6528 270.3911 L188.4072 254.3779 L187.8467 254.939 L186.1577 256.6235 L184.7451 258.0361 L183.332 256.6235 L181.6455 254.939 L-173.0254 -99.7324 L-173.0254 -99.7324 LfUuu*u0.4 g733.8643 346.1748 m445.3008 346.1748 L442.9297 346.1362 440.2861 346.2896 439.041 345.9858 C437.4824 345.6514 436.0342 344.8745 434.8857 343.7598 C433.7529 342.6338 432.9365 341.2114 432.5908 339.6699 C432.2363 338.4351 432.417 335.9175 432.3701 333.5264 C432.3701 319.3652 L432.3701 305.2065 L432.3701 298.1274 L432.502 295.6118 431.8955 291.9834 430.373 289.3438 C427.5303 283.7427 420.7773 280.2456 414.9004 280.6113 C400.6055 280.6113 L386.3115 280.6113 L379.1631 280.6113 L377.9531 280.6138 376.8242 280.6035 375.5459 280.6182 C373.9668 280.6445 372.3887 280.8818 370.8643 281.3257 C364.7402 283.1069 359.9795 288.5908 359.1553 294.8682 C359.0098 295.6421 359.0205 296.4292 358.9756 297.2075 C358.9756 298.9766 L358.9756 302.5161 L358.9756 309.5957 L354.5234 309.5957 L363.126 320.5986 L371.7275 309.5947 L367.2754 309.5957 L367.2764 302.5161 L367.2764 298.9766 L367.2764 297.2075 L367.3203 296.8076 367.2832 296.4053 367.375 296.019 C367.7715 292.8809 370.2021 290.0825 373.2715 289.1943 C374.0371 288.9785 374.8271 288.8574 375.6338 288.8389 C376.7363 288.8257 377.9912 288.835 379.1631 288.8335 C386.3105 288.8335 L400.6055 288.8325 L414.9004 288.8335 L418.5879 288.6587 421.4531 290.4038 423.0645 293.2417 C423.8232 294.7764 424.127 295.9248 424.0703 298.1274 C424.0693 305.2075 L424.0693 319.3652 L424.0693 333.5259 L424.1719 335.8345 423.791 338.0981 424.4961 341.4912 C425.1924 344.5645 426.8086 347.4028 429.0527 349.6099 C431.3066 351.8101 434.1963 353.3652 437.3057 354.0254 C440.7529 354.6499 442.9219 354.3037 445.3008 354.3975 C733.8633 354.3975 LF*UUUuu*u0.733333 0.168627 0.109804 0 0.152941 0.647059 0.8 Xa-72.748 -101.2773 m161.7358 133.2725 L220.3579 191.9102 L224.7344 196.2031 231.0596 202.9736 238.4668 207.8906 C245.751 212.7832 253.6113 217.0107 262.0537 219.5576 C278.8008 225.0039 297.0605 225.3398 314.0215 220.6543 C348.2979 211.5586 375.1123 180.5879 379.3076 145.4121 C381.6484 128.0059 378.707 109.9238 370.9482 94.1016 C367.0313 86.2402 362.1494 78.7617 356.0762 72.4297 C350.3545 66.2715 346.0645 62.3008 340.9893 57.1328 C355.6641 42.4424 L304.5117 48.0654 L298.958 99.2129 L313.6318 84.5215 L318.2432 89.2061 324.0215 94.7246 327.665 98.7246 C331.2168 102.3359 333.9023 106.6289 336.1602 111.082 C340.5693 120.0547 342.2852 130.4355 340.9219 140.4014 C338.5801 160.4121 323.1602 178.1895 303.6777 183.3496 C293.998 186.0137 283.4902 185.8359 273.9492 182.7197 C269.1055 181.332 264.7051 178.8164 260.5293 176.082 C256.3594 173.3516 253.1865 169.9121 247.7334 164.54 C189.1118 105.9033 L-45.3711 -128.6465 L-72.748 -101.2773 Lf*UUUuu*u443.1426 491.9458 m379.9268 428.7124 L364.123 412.9038 L362.9424 411.7461 361.2383 409.9209 359.2402 408.5952 C357.2773 407.2764 355.1582 406.1367 352.8818 405.4497 C348.3672 403.9819 343.4443 403.8911 338.8711 405.1543 C329.6309 407.6064 322.4014 415.9561 321.2705 425.439 C320.6396 430.1318 321.4326 435.0068 323.5244 439.2725 C324.5801 441.3916 325.8965 443.4082 327.5332 445.1152 C329.0762 446.7754 330.2324 447.8457 331.6016 449.2393 C327.6445 453.1992 L341.4355 451.6836 L342.9326 437.8945 L338.9766 441.855 L337.7334 440.5923 336.1758 439.1045 335.1934 438.0259 C334.2354 437.0527 333.5117 435.895 332.9033 434.6943 C331.7148 432.2754 331.252 429.4771 331.6191 426.79 C332.251 421.395 336.4072 416.6025 341.6602 415.2114 C344.2695 414.4932 347.1025 414.541 349.6748 415.3813 C350.9805 415.7554 352.167 416.4336 353.293 417.1709 C354.417 417.9067 355.2725 418.8345 356.7422 420.2822 C372.5469 436.0908 L435.7627 499.3242 L443.1426 491.9458 Lf*U0.513725 0.807843 0 0 0.729412 0 1 Xa345.3975 406.2734 m343.3652 406.2734 341.3477 406.5459 339.4023 407.084 c330.9238 409.3335 324.293 416.9766 323.2568 425.6748 c322.6768 429.9941 323.4111 434.4995 325.3213 438.3926 c326.3672 440.4946 327.5996 442.2944 328.9756 443.7314 c329.9629 444.791 330.7588 445.5781 331.6006 446.4116 c332.0674 446.8735 332.5332 447.3359 333.0273 447.8379 C334.416 449.252 L333.0801 450.5898 L339.6221 449.8701 L340.3311 443.3306 L338.9658 444.6958 L337.5498 443.2588 L337.1152 442.8135 336.6377 442.3433 336.1631 441.8726 c335.2871 441.0029 334.3818 440.1064 333.7148 439.374 c332.7783 438.4243 331.9365 437.207 331.1201 435.5991 c329.7422 432.7944 329.2207 429.5786 329.6387 426.521 c330.3604 420.3423 335.0957 414.8809 341.1475 413.2793 c342.5127 412.9019 343.9492 412.7095 345.3975 412.7095 c347.0811 412.7095 348.7295 412.9692 350.2949 413.48 c351.8604 413.9272 353.2471 414.75 354.3887 415.4971 c355.5049 416.2295 356.3389 417.061 357.4932 418.2109 C358.1475 418.8589 L373.9609 434.6768 L435.7617 496.4971 L440.3154 491.9453 L378.5127 430.1274 L362.709 414.3179 L362.123 413.7354 L361.0234 412.6377 359.6563 411.2705 358.1348 410.2617 c356.0625 408.8691 354.1592 407.9238 352.3057 407.3667 c350.0605 406.6367 347.75 406.2734 345.3975 406.2734 C345.3975 406.2734 LfUU*u0 0 0 0 1 1 1 Xa-194.6172 -32.5273 m70.0332 232.1113 l111.9463 274.0122 L132.9004 294.9624 L134.8213 296.9106 136.0498 298.0459 137.0254 299.5352 C138.0029 301.0278 138.9023 302.5996 139.3975 304.332 C140.5117 307.7402 140.5752 311.4961 139.623 314.9561 C137.7803 321.918 131.4268 327.4292 124.2734 328.2661 C120.7129 328.7534 117.002 328.1401 113.7949 326.564 C112.2051 325.7573 110.6709 324.7974 109.3789 323.5293 C107.9502 322.2256 105.9785 320.1616 104.3027 318.5127 C109.5537 313.269 L91.2754 315.2529 L89.2646 333.5347 L94.5156 328.291 L96.3623 330.1045 97.7813 331.6372 99.9824 333.6821 C102.2451 335.853 104.918 337.5972 107.7275 338.9971 C113.3828 341.77 119.8438 342.8223 126.0645 341.9854 C138.6357 340.4849 149.7051 330.9019 152.9561 318.6528 C154.6299 312.5913 154.5098 306.0659 152.5625 300.0791 C151.6523 297.063 150.1426 294.2529 148.3936 291.6509 C146.6367 289.0034 144.2178 286.7427 142.6816 285.1792 C121.7266 264.2275 L79.8145 222.3281 l-184.8369 -42.3115 L-194.6172 -32.5273 Lf/BBAccumRotation (0.785398) XT*U/BBAccumRotation (0.785398) XT/ShapeBlendPathType (K) XT/ShapeBlendPathID (B) XT0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa229.4766 185.5225 m229.5459 185.5889 L170.9219 126.9502 L57.2148 13.2109 l-56.4912 -100.5264 L-43.2598 -113.7539 L70.4463 -0.015625 l184.1533 113.7227 L242.7734 172.3584 L243.7188 173.2891 244.5469 174.1143 245.3291 174.8926 c249.5215 179.0645 252.832 182.3594 257.166 185.1953 c261.2402 187.8633 266.7207 191.1514 273.0801 193.0137 c284.334 196.6611 296.8857 196.9219 308.4453 193.7383 c331.791 187.5566 350.1309 166.418 352.9639 142.3457 c354.5488 130.5381 352.5195 118.1426 347.2461 107.4199 C347.2207 107.3633 L347.1924 107.3076 L344.0957 101.2041 340.873 96.5254 337.0537 92.6113 c335.6055 91.0254 333.7959 89.1553 331.2168 86.5762 c330.1387 85.498 329.0264 84.3936 327.915 83.292 c326.8379 82.2236 325.7559 81.1533 324.709 80.1064 c324.0811 79.4785 323.4658 78.8574 322.8682 78.252 C315.792 71.0703 L314.0811 72.7861 L315.6992 57.877 L330.6113 56.2373 L329.0234 57.8271 L335.9746 64.8926 L336.6885 65.6191 337.3877 66.3242 338.0781 67.0146 c339.1514 68.0879 340.2002 69.125 341.25 70.165 c342.2422 71.1455 343.2324 72.127 344.2441 73.1396 c345.9326 74.8271 348.2129 77.1318 350.8633 79.9834 C350.918 80.043 L350.9717 80.1016 L355.8965 85.2334 360.3164 91.6973 364.1123 99.3115 c370.9434 113.2441 373.582 129.4307 371.5098 144.8281 C371.501 144.9023 L371.4922 144.9775 L369.6289 160.6016 362.7422 175.2754 352.5244 187.0518 c342.3076 198.8271 328.7588 207.7051 313.5703 211.7363 C313.5215 211.749 L313.4717 211.7637 L298.3965 215.9277 281.9844 215.5859 267.2598 210.7969 C267.1592 210.7637 L267.0547 210.7324 L260.4307 208.7344 253.5947 205.335 246.1582 200.3369 c240.6631 196.6914 235.6758 191.707 231.6699 187.7012 c230.8955 186.9258 230.1641 186.1943 229.4766 185.5225 C229.4766 185.5225 Lf/ShapeBlendPathType (K) XT/ShapeBlendPathID (A) XTuu0.4 g249.8027 33.7031 m234.1348 33.7051 218.896 38.7188 206.854 47.8359 c204.4414 49.5215 202.4575 51.3535 200.8555 52.8398 C199.4648 54.1191 L199.1763 54.375 L198.9004 54.6582 L194.5137 59.0293 L185.7397 67.7988 L178.1396 75.416 L177.0049 74.291 L156.7075 54.0098 L153.2188 82.4902 L147.2759 131.0078 L145.1064 148.7793 L162.8682 146.5957 L211.3872 140.6543 L239.8936 137.1699 L219.5801 116.873 L218.4648 115.75 L226.0811 108.1406 L234.8418 99.373 L238.7617 95.4531 L239.2324 95.0547 239.6865 94.627 240.1309 94.2148 C240.3535 94.0195 L240.4844 93.9238 L241.0898 93.4629 L243.4316 91.6504 246.6963 90.6055 250.0488 90.6055 c252.668 90.6055 255.1396 91.209 257.2334 92.3574 c258.5625 93.1035 259.8789 94.0742 261.04 95.1934 c262.7715 96.8867 264.7695 98.877 266.7441 100.8652 C269.5811 103.7012 L287.252 121.373 L322.626 156.75 L357.9902 192.1152 L358.2236 192.3477 L358.4727 192.5781 L363.6514 197.293 365.4375 202.9414 363.7549 209.3379 C362.6621 212.4707 361.7344 214.1602 357.9375 217.7656 C357.8115 217.8906 L357.6816 218.0117 L340.1602 235.5171 L305.123 270.5669 L270.0996 305.5972 L269.8721 305.8179 L269.6582 306.0474 L268.2969 307.5356 266.708 309.063 265.0225 310.6841 c260.6152 314.9282 255.1191 320.2075 249.627 328.5786 c242.1953 340.3677 238.4023 353.8335 238.5195 367.7466 c238.6914 381.6138 242.7568 395.021 250.2754 406.5991 C250.3955 406.7749 L250.5059 406.9497 L256.1221 415.0425 261.4619 420.1948 265.7422 424.3286 c267.4082 425.9399 269.0234 427.4839 270.5928 429.1763 C270.7832 429.3843 L270.9814 429.5786 L472.9932 631.5903 L482.8926 641.4927 L492.791 631.5903 L513.1465 611.2476 L523.0488 601.3457 L513.1406 591.4561 L311.1221 389.438 L309.5 387.7417 307.6035 385.8843 305.7656 384.0747 c303.1064 381.4614 299.0801 377.4966 298.1328 376.0562 c296.3457 373.2749 295.4668 370.3726 295.4258 367.3735 c295.4199 364.5337 296.2227 361.5991 297.6914 359.2681 C297.9121 358.9272 L298.1133 358.564 L298.9043 357.3511 302.5684 353.7524 305 351.3726 c306.8486 349.5503 308.7744 347.6567 310.6162 345.7505 C345.4648 310.8989 L380.5049 275.8618 L397.7285 258.6245 L404.9238 252.0522 414.501 239.644 418.3438 225.7402 c426.3848 200.5469 417.7822 169.5117 397.79 151.6309 C362.7559 116.6094 L327.3926 81.2383 L309.7012 63.5508 L306.6348 60.4883 L304.6953 58.5293 302.7539 56.5898 300.6289 54.5117 c295.6816 49.7227 290.1826 45.6699 284.2227 42.4082 c273.8701 36.7148 261.9668 33.7051 249.8027 33.7031 C249.8027 33.7031 Lf0.513725 0.807843 0 0 0.729412 0 1 Xa249.8027 40.6992 m235.6602 40.7051 221.9116 45.2188 211.0693 53.416 c208.8579 54.9746 207.1587 56.541 205.6606 57.9258 C204.1758 59.2813 L203.9229 59.5156 L203.8389 59.6016 L199.458 63.9766 L190.6943 72.75 L183.0938 80.3672 L178.1396 85.3184 L173.189 80.3672 L172.0635 79.2422 L161.9116 69.1035 L160.1675 83.3438 L154.2275 131.8496 L153.1348 140.75 L162.0186 139.6523 L210.5435 133.7188 L224.7842 131.9727 L214.6357 121.8301 L213.52 120.7051 L208.5659 115.7578 L213.5073 110.8047 L221.1265 103.1836 L229.8979 94.4199 L233.8145 90.5078 L234.0059 90.3047 L234.2134 90.1348 L234.6021 89.8027 234.9751 89.457 235.3418 89.1016 C235.7598 88.7246 L236.4668 88.1934 L236.8135 87.9316 L240.3535 85.1875 245.1719 83.6094 250.0488 83.6094 c253.8418 83.6094 257.4902 84.5156 260.6016 86.2344 c262.5254 87.3086 264.334 88.6582 265.8906 90.1563 c267.6934 91.9102 269.7041 93.9199 271.6982 95.9258 C274.5254 98.7539 L292.1934 116.4316 L327.5732 151.7949 L362.9316 187.1699 L370.2432 193.8301 372.8535 202.2598 370.5215 211.1113 C370.4531 211.3867 L370.3633 211.6523 L368.7715 216.1914 366.9971 218.8086 362.7627 222.832 C345.1074 240.4712 L310.0713 275.5083 L275.0371 310.5454 L273.3711 312.3667 271.6748 314.0044 269.8721 315.7388 c265.4883 319.9575 260.5342 324.7271 255.4697 332.4175 c248.8848 342.8774 245.4258 355.1206 245.5195 367.6782 c245.6719 380.1812 249.3555 392.3267 256.1504 402.7896 C256.2031 402.8706 L256.3652 403.1372 L261.4492 410.4419 266.2734 415.1011 270.5273 419.2222 C271.1338 419.8159 L272.709 421.3296 274.25 422.8179 275.7344 424.4263 C477.9473 626.6455 L482.8926 631.5962 L487.8398 626.6455 L508.1924 606.3003 L513.1406 601.3521 L508.1924 596.4072 L306.1807 394.3823 L304.5039 392.6577 302.6523 390.8325 300.8535 389.0649 c296.0996 384.3931 293.4707 381.689 292.3027 379.9185 c289.7734 375.9985 288.4932 371.8452 288.4258 367.481 c288.4121 363.1909 289.5996 358.9761 291.7676 355.5386 C291.8613 355.3999 L291.9531 355.2212 L292.1016 354.9712 L292.252 354.7222 L293.1982 353.2788 295.1045 351.2524 300.1016 346.3726 c301.9043 344.5991 303.7813 342.7485 305.5781 340.8901 C340.5195 305.9536 L375.5508 270.9097 L392.7803 253.6772 L399.4434 247.5913 408.1689 236.3208 411.5928 223.873 c418.9014 201.002 411.0898 172.9219 393.124 156.8535 C392.9785 156.7207 L392.8457 156.582 L357.8047 121.5605 L322.4434 86.1797 L304.7539 68.4961 L301.6865 65.4219 L299.7607 63.4961 297.8408 61.5664 295.7402 59.5078 c291.2813 55.2031 286.2725 51.5039 280.873 48.5488 c271.5254 43.4102 260.7871 40.7051 249.8027 40.6992 C249.8027 40.6992 Lf*u0.078431 0.529412 1 0.003922 0.901961 0.541176 0 Xa503.2441 601.3521 m301.2266 399.3364 L295.4551 393.3706 288.5293 387.2104 286.2041 383.3745 C283.1689 378.6899 281.5195 373.1841 281.4287 367.5845 C281.416 361.9946 282.9141 356.4604 285.8701 351.7847 C288.0459 347.8511 294.7217 342.0669 300.5254 336.0366 C335.5596 300.9995 L370.6035 265.9595 L388.125 248.4468 L394.6738 242.5493 402.1445 232.0664 404.9102 221.7715 C411.7393 200.8789 403.6846 175.5137 388.2383 161.877 C352.8633 126.502 L317.4961 91.127 L299.8086 73.4473 L296.8008 70.4512 294.0342 67.6426 290.834 64.5078 C286.8691 60.6699 282.375 57.3516 277.5049 54.6777 C257.9404 43.9355 232.5918 45.7227 215.0186 59.2129 C212.7417 60.7695 210.8291 62.748 208.7803 64.5566 C204.4063 68.9316 L195.6514 77.6914 L178.1265 95.2129 L167.1094 84.1934 L161.1724 132.7109 L209.6846 126.7656 L198.6699 115.7578 L216.1855 98.2324 L224.9463 89.4707 L229.3237 85.0996 L230.4229 84.2188 231.3242 83.1289 232.5073 82.4023 C241.252 75.6172 254.1953 74.7051 263.9844 80.1035 C266.4199 81.4648 268.6699 83.1191 270.7188 85.0703 C273.4746 87.7695 276.5488 90.8887 279.4639 93.7871 C297.1465 111.4746 L332.5117 146.8438 L367.8887 182.2129 L377.4541 190.9121 380.2197 202.3203 377.1787 213.332 C375.2588 219.0039 373.1709 222.5996 367.584 227.9102 C350.0557 245.4224 L315.0254 280.4585 L279.9824 315.4956 L274.5254 321.4653 267.9824 326.1216 261.3379 336.2632 C255.4512 345.5952 252.4219 356.6118 252.5254 367.6265 C252.6582 378.6538 255.9492 389.6489 262.0195 398.9771 C269.0039 409.0513 275.2227 413.5679 280.8809 419.6792 C482.8994 621.7007 LF*U0.580392 0 1 0 0.466667 0.760784 0.113725 Xa249.8027 54.7031 m238.5781 54.6992 227.7251 58.2793 219.272 64.7578 C219.123 64.8848 L218.9541 65.0039 L217.7192 65.8477 216.4575 67.0078 215.1382 68.2363 c214.6421 68.6914 214.1558 69.1504 213.6563 69.5996 C209.3638 73.8887 L200.5962 82.6563 L183.0747 100.1641 L178.1265 105.1094 L173.1724 100.1602 L172.3164 99.293 L169.21 124.6699 L194.5913 121.5664 L193.7227 120.7051 L188.7686 115.7461 L193.71 110.7988 L211.2344 93.2871 L219.9985 84.5273 L224.3755 80.1465 L224.6548 79.877 L224.959 79.6367 L225.2383 79.4063 225.4844 79.1582 225.75 78.9141 c226.4639 78.25 227.3359 77.4297 228.4937 76.668 C234.4922 72.1113 242.1377 69.6074 250.0547 69.6074 c256.1963 69.6074 262.1816 71.1133 267.3633 73.9727 c270.3652 75.6523 273.1016 77.6797 275.5469 80.0059 c277.46 81.8848 279.4697 83.8965 281.4766 85.9023 C284.4043 88.832 L302.0957 106.5234 L337.4688 141.8945 L372.8438 177.2715 L383.709 187.1406 387.8301 201.0508 383.9316 215.1934 C383.874 215.3887 L383.8027 215.5723 L381.3574 222.8223 378.4814 227.2188 372.4063 232.9883 C355.0068 250.3833 L319.9863 285.4067 L284.9365 320.4536 L283.335 322.2036 281.4346 324.0356 279.5859 325.8198 c275.5469 329.6909 271.377 333.7017 267.1816 340.106 c262.1748 348.0396 259.4316 357.8286 259.5225 367.5679 c259.6465 377.2271 262.6035 387.0317 267.8818 395.1567 c272.2012 401.3862 276.332 405.3745 280.332 409.2358 c282.2969 411.1099 284.1875 412.9448 286.0195 414.9204 C482.9014 611.7988 L493.3428 601.3521 L296.2813 404.2817 L294.5273 402.4819 292.7695 400.7407 291.0449 399.0513 c286.3691 394.4341 282.3262 390.4565 280.2217 387.019 c276.5713 381.3677 274.5352 374.6265 274.4316 367.6851 c274.3955 360.6655 276.2637 353.9888 279.8008 348.2925 c281.8242 344.6899 285.7305 340.854 290.2578 336.4126 c291.9824 334.7202 293.7686 332.9653 295.4707 331.1831 C330.6182 296.0454 L365.6553 261.0112 L383.1611 243.5024 L383.2998 243.3696 L383.4365 243.2495 L388.8184 238.4058 395.7148 229.0449 398.1592 219.9531 C398.209 219.7715 L398.2666 219.5977 L403.9639 202.0977 397.667 179.5449 383.6045 167.123 C383.4453 166.9766 L383.2773 166.8262 L347.9131 131.4473 L312.543 96.082 L294.8584 78.3926 L291.7783 75.3145 L289.8906 73.4258 288.0068 71.5352 285.9414 69.5117 c282.4277 66.1094 278.4424 63.1797 274.1396 60.8223 c266.8574 56.8164 258.4463 54.6992 249.8027 54.7031 C249.8027 54.7031 LfUU0 0 0 0 1 1 1 Xa141.9375 43.1875 m141.9585 43.207 L124.4863 25.7314 L90.5981 -8.16699 l56.7104 -42.0635 L60.6533 -46.0059 L94.5415 -12.1084 l128.4297 21.79 L145.8999 39.2637 L146.1816 39.542 146.4287 39.7871 146.6616 40.0195 c147.9111 41.2627 148.8979 42.2451 150.1899 43.0898 c151.4043 43.8857 153.0376 44.8652 154.9321 45.4209 c158.2866 46.5078 162.0273 46.585 165.4722 45.6357 c172.4302 43.7949 177.896 37.4941 178.7402 30.3203 c179.2129 26.8008 178.6079 23.1064 177.0361 19.9111 C177.0288 19.8936 L177.0205 19.877 L176.0977 18.0576 175.1367 16.6641 173.999 15.498 c173.5669 15.0254 173.0278 14.4668 172.2593 13.6982 c171.938 13.377 171.6064 13.0479 171.2749 12.7197 c170.9541 12.4014 170.6313 12.083 170.3198 11.7705 c170.1323 11.583 169.9492 11.3984 169.771 11.2168 C167.6616 9.07813 L167.1523 9.58789 L167.6343 5.14551 L172.0786 4.65625 L171.6055 5.13086 L173.6768 7.23633 L173.8896 7.45215 174.0986 7.66406 174.3037 7.86914 c174.6235 8.18848 174.9365 8.49805 175.249 8.80762 c175.5449 9.10059 175.8403 9.3916 176.1416 9.69434 c176.645 10.1963 177.3247 10.8838 178.1147 11.7334 C178.1309 11.751 L178.1465 11.7686 L179.6147 13.2979 180.9316 15.2246 182.063 17.4941 c184.0986 21.6465 184.8853 26.4707 184.2671 31.0596 C184.2651 31.082 L184.2622 31.1035 L183.7075 35.7607 181.6548 40.1338 178.6094 43.6426 c175.5645 47.1533 171.5269 49.7998 167 51 C166.9849 51.0039 L166.9707 51.0088 L162.4775 52.249 157.5859 52.1484 153.1982 50.7197 C153.1685 50.7109 L153.1372 50.7012 L151.1626 50.1055 149.1255 49.0928 146.9092 47.6025 c145.2715 46.5166 143.7847 45.0303 142.5913 43.8379 c142.3599 43.6055 142.1421 43.3887 141.9375 43.1875 C141.9375 43.1875 Lf/ShapeBlendPathType (K) XT/ShapeBlendPathID (A) XTuu0.4 g246.5996 108.4102 m238.4297 108.4102 230.459 111.0391 224.1152 115.8252 c222.7759 116.7734 221.7378 117.7383 220.9644 118.457 C220.4375 118.9404 L220.1826 119.1699 L219.9443 119.4072 L218.0205 121.3281 L112.9805 226.3623 L99.2598 212.6455 L96.1279 237.2451 L93.4331 258.4346 L91.4531 274.0127 L107.0342 272.0322 L128.2256 269.3408 L152.8345 266.2041 L139.1079 252.4824 L244.1367 147.4619 L245.7344 145.8604 L245.8672 145.7451 245.9961 145.625 246.127 145.5078 C246.3203 145.3525 L246.3047 145.3672 246.3066 145.3721 246.3252 145.3721 c246.3574 145.3721 246.457 145.3496 246.584 145.3496 c246.7021 145.3496 246.7852 145.3721 246.8047 145.376 C246.8555 145.4102 246.9941 145.5107 247.123 145.6348 c247.8135 146.3057 248.6514 147.1533 249.4922 147.9932 C250.7383 149.2383 L258.4072 156.9121 L273.7725 172.2744 L289.1387 187.6416 L289.3428 187.8428 L289.5586 188.0391 L290.0664 188.501 290.1504 188.7188 290.0938 189.0303 C290.0264 189.2021 289.9941 189.2715 289.9863 189.2842 c289.9775 189.2959 289.7744 189.5566 289.1426 190.1631 C289.0215 190.2676 L288.9082 190.3877 L281.2275 198.0713 L265.8623 213.4355 L250.4951 228.7998 L250.3027 228.9912 L250.1211 229.1904 L249.6533 229.7002 249.0498 230.2822 248.3496 230.957 c246.3184 232.916 243.5293 235.5977 240.75 239.8145 C240.6914 239.9102 L240.6309 240.001 L236.8115 246.0322 234.8086 253.0361 234.8325 260.2568 c234.8887 267.5 236.9746 274.4766 240.8711 280.4893 C240.9648 280.6377 L241.0645 280.7842 L243.8506 284.8232 246.418 287.2988 248.4844 289.2832 c249.1152 289.8965 249.7373 290.4834 250.334 291.1318 C250.4951 291.3066 L250.665 291.4795 L560.8643 601.6831 L569.4668 610.2813 L578.0674 601.6831 L586.9932 592.7568 L595.5918 584.1543 L586.9932 575.5537 L276.79 265.3525 L276.9316 265.5029 L276.1143 264.6553 275.2451 263.793 274.4004 262.9629 c273.5713 262.1465 272.3506 260.9443 271.8594 260.377 C271.8164 260.2861 271.7764 260.1543 271.7764 260.0059 c271.7764 259.9385 271.8301 259.7949 271.8486 259.7588 C271.8965 259.6846 L272.3545 259.1602 273.4512 258.0801 274.2002 257.3428 c275.0498 256.5098 275.9346 255.6406 276.7813 254.7568 C276.6172 254.9268 L291.9863 239.5576 L307.3525 224.1865 L314.8828 216.6582 L318.7461 213.0811 323.4316 206.875 325.4629 199.7471 c329.6494 186.6426 325.3076 170.6172 315.0576 161.3086 C299.8975 146.1543 L284.5322 130.7881 L276.8496 123.1045 L275.3809 121.6416 L274.5693 120.8203 273.749 120.0039 272.8574 119.127 c270.2783 116.6396 267.4424 114.5566 264.373 112.8809 c259.0176 109.959 252.8691 108.4102 246.5996 108.4102 C246.5996 108.4102 Lf0.043137 0.992157 0.498039 0 0.894118 0.105882 0.356863 Xa246.5996 111.4482 m239.0938 111.4482 231.7603 113.8672 225.9458 118.2529 c224.7285 119.1152 223.8135 119.9629 223.082 120.6357 C222.5005 121.1748 L222.2476 121.4023 L222.0923 121.5576 L220.1694 123.4805 L115.1284 228.5127 L112.9785 230.6631 L110.8306 228.5127 L101.4937 219.1748 L99.1436 237.6309 L96.4512 258.8184 L94.9644 270.5 L106.6489 269.0205 L127.8423 266.3242 L146.3018 263.9707 L136.9614 254.6328 L134.8086 252.4824 L136.9614 250.335 L241.9863 145.3115 L243.5879 143.71 L243.6436 143.6523 L243.7061 143.5977 L243.8916 143.4248 L244.0938 143.2451 L244.1729 143.1738 L244.2559 143.1094 L244.4512 142.9561 L245.1172 142.4365 L246.0137 142.3477 L246.1504 142.3311 246.3516 142.3096 246.584 142.3096 c247 142.3096 247.4072 142.374 247.7656 142.4932 C248.1533 142.6201 L248.4902 142.8457 L248.6113 142.9268 248.9414 143.1592 249.2451 143.4561 c249.8613 144.0547 250.6064 144.8037 251.3604 145.5605 C251.6465 145.8457 L252.8867 147.0928 L260.5547 154.7627 L275.9219 170.124 L291.2891 185.4912 L291.4775 185.6758 L291.6025 185.7881 L292.0693 186.2168 293.46 187.4902 293.0869 189.5684 C293.0332 189.8535 L292.9307 190.1191 L292.7949 190.4766 292.7178 190.6123 292.7051 190.6436 C292.583 190.8906 L292.4199 191.1084 L292.291 191.2813 291.9678 191.6709 291.2383 192.3633 C291.1543 192.4395 L291.0898 192.5039 L283.3789 200.2217 L268.0088 215.5811 L252.6445 230.9482 L252.4531 231.1396 L252.3652 231.2471 L251.8535 231.7998 251.209 232.4248 250.4609 233.1484 c248.5098 235.0254 245.8711 237.5654 243.2891 241.4873 C243.2012 241.624 L239.6934 247.165 237.8535 253.6055 237.8721 260.2471 c237.9248 266.8818 239.8457 273.3154 243.4238 278.8398 C243.5479 279.0361 L243.5781 279.0742 L246.1992 282.8691 248.6328 285.2109 250.5898 287.0928 C250.8691 287.3584 L251.4473 287.9209 252.0137 288.4717 252.5703 289.0684 C252.7285 289.2451 L252.8379 289.3506 L563.0117 599.5332 L569.4648 605.981 L575.9199 599.5332 L584.8438 590.6069 L591.2959 584.1567 L584.8438 577.7036 L274.75 267.6123 L274.7422 267.6152 L273.9453 266.7861 273.0977 265.9463 272.2705 265.1367 c271.1943 264.0762 270.1016 262.9912 269.5615 262.3662 C269.2969 262.0625 L269.1221 261.6934 L268.8691 261.1738 268.7373 260.5898 268.7373 260.0059 c268.7373 259.1074 269.124 258.3916 269.2441 258.1953 C269.3828 257.9609 L269.6045 257.6855 L270.0723 257.1514 270.9287 256.2969 271.9219 255.3203 C272.0645 255.1787 L272.8496 254.4102 273.6563 253.6172 274.4346 252.8105 C274.4756 252.7676 L274.5117 252.7295 L274.5879 252.6523 L274.5918 252.6523 L289.8379 237.4121 L305.2041 222.041 L312.7324 214.5127 L316.2959 211.2041 320.6807 205.4385 322.54 198.9111 c326.3809 186.8799 322.3652 172.0498 313.0146 163.5586 C297.748 148.3047 L282.3848 132.9375 L274.6992 125.2539 L273.2344 123.7939 L272.4189 122.9697 271.6123 122.166 270.7305 121.3037 c268.373 119.0313 265.7412 117.0918 262.9209 115.5498 c258 112.8682 252.3574 111.4482 246.5996 111.4482 C246.5996 111.4482 Lf*u0.078431 0.529412 1 0.003922 0.901961 0.541176 0 Xa578.3906 584.1567 m268.1895 273.9551 L265.6826 271.3623 262.6738 268.6875 261.665 267.0186 C260.3535 264.9814 259.6387 262.582 259.6143 260.1348 C259.6182 257.6973 260.2852 255.2744 261.5859 253.2324 C262.5449 251.5107 265.4707 248.9697 268.0166 246.3242 C283.3848 230.957 L298.751 215.5908 L306.4326 207.9092 L309.3057 205.3184 312.5908 200.7285 313.8193 196.2275 C316.8418 187.0957 313.3789 176.041 306.665 170.1191 C291.2969 154.7529 L275.9316 139.3877 L268.2471 131.7021 L266.9443 130.4043 265.7412 129.1807 264.3506 127.8213 C262.626 126.1543 260.6709 124.7158 258.5508 123.5596 C250.0352 118.9092 238.9639 119.7422 231.2661 125.6689 C230.27 126.3535 229.4272 127.2197 228.5352 128.0146 C226.6138 129.9355 L120.6631 235.8828 L112.9805 243.5664 L108.1943 238.7793 L105.4995 259.9697 L126.6895 257.2734 L121.9033 252.4902 L129.5854 244.8037 L235.5361 138.8594 L237.458 136.9385 L237.9395 136.5508 238.3359 136.0742 238.8525 135.7539 C242.6855 132.7754 248.3359 132.3516 252.5977 134.6885 C253.6563 135.2744 254.6367 135.9932 255.5244 136.8408 C256.7236 138.0088 258.0625 139.3691 259.3242 140.6289 C267.0078 148.3096 L282.374 163.6738 L297.7412 179.041 L301.8945 182.8164 303.0811 187.79 301.7324 192.6025 C300.8838 195.085 299.9629 196.6563 297.5107 198.9854 C289.8271 206.667 L274.4619 222.0342 L259.0928 237.4033 L256.6992 240.0176 253.832 242.0645 250.9082 246.5059 C248.3203 250.5889 246.9785 255.4082 246.9941 260.2168 C247.0303 265.0264 248.4473 269.8203 251.0742 273.8809 C254.1016 278.2627 256.8105 280.2188 259.2656 282.876 C569.4668 593.0801 LF/BBAccumRotation (0.785398) XT*U/BBAccumRotation (0.785398) XT0.95 g246.6035 123.6143 m241.6514 123.6143 236.8633 125.1973 233.1206 128.0801 C233.0547 128.1299 L232.9814 128.1777 L232.4331 128.5566 231.8813 129.0684 231.2959 129.6123 c231.0732 129.8184 230.8496 130.0215 230.6245 130.2246 C228.7617 132.085 L122.812 238.0332 L115.1294 245.7139 L112.9805 247.8643 L110.8306 245.7139 L110.4282 245.3135 L109.0083 256.46 L120.1553 255.042 L119.7529 254.6396 L117.6006 252.4902 L119.7529 250.3398 L127.4375 242.6563 L233.3848 136.709 L235.3066 134.7861 L235.4297 134.6641 L235.5645 134.5566 L235.6914 134.4561 235.8027 134.3457 235.918 134.2383 c236.2227 133.9531 236.5889 133.6084 237.0762 133.2852 C239.7217 131.2568 243.0928 130.1465 246.582 130.1465 c249.2383 130.1465 251.8223 130.7949 254.0586 132.0205 c255.3711 132.749 256.5645 133.6299 257.623 134.6406 c258.4766 135.4707 259.3691 136.3691 260.2578 137.2598 C261.4717 138.4756 L269.1572 146.1592 L284.5234 161.5234 L299.8887 176.8887 L304.6133 181.1768 306.3887 187.2393 304.6631 193.4258 C304.6367 193.5049 L304.6104 193.5889 L303.5264 196.749 302.2627 198.6699 299.6045 201.1885 C291.9756 208.8213 L276.6104 224.1865 L261.2441 239.5527 L260.5439 240.3213 259.71 241.126 258.9004 241.9023 c257.127 243.6045 255.2959 245.3691 253.4473 248.1777 c251.2461 251.6592 250.0215 255.9443 250.0371 260.2041 c250.0674 264.4258 251.3438 268.6992 253.6279 272.2236 c255.5 274.9365 257.2949 276.668 259.0352 278.3438 c259.8809 279.1631 260.7021 279.9531 261.498 280.8174 C569.4668 588.7803 L574.0928 584.1592 L266.0381 276.1055 L265.2676 275.3057 264.4883 274.5391 263.7305 273.79 c261.71 271.8047 259.9648 270.0859 259.0615 268.5938 c257.4805 266.1348 256.6055 263.1992 256.5752 260.168 c256.5781 257.0801 257.4111 254.1445 258.9893 251.6465 c259.8916 250.0908 261.5869 248.4238 263.5449 246.4971 c264.2969 245.7617 265.0762 244.9951 265.8252 244.2178 C281.2363 228.8076 L296.6016 213.4404 L304.2842 205.7568 L304.3398 205.6992 L304.3955 205.6494 L306.7637 203.5137 309.8018 199.4072 310.8877 195.4258 C310.9063 195.3516 L310.9326 195.2725 L313.4658 187.6201 310.7646 177.7891 304.6543 172.3994 C304.5811 172.3369 L304.5146 172.2695 L289.1494 156.9053 L273.7832 141.541 L266.0977 133.8525 L264.8711 132.627 L264.0146 131.7695 263.1621 130.9102 262.2266 129.9951 c260.7021 128.5225 258.9736 127.251 257.0977 126.2334 c253.959 124.5166 250.332 123.6143 246.6035 123.6143 C246.6035 123.6143 LfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF